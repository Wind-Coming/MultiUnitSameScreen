//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Samples/Packages/com.unity.collections/Unity.Collections.Tests/FixedStringTests.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#if !UNITY_DOTSPLAYER
using System;
using System.Globalization;
using System.Threading;
using NUnit.Framework;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using System.Text;

namespace FixedStringTests
{
    [TestFixture("en-US")]
    [TestFixture("da-DK")]
    internal class DecimalSeparatorCulture
    {
        CultureInfo testCulture;
        CultureInfo backupCulture;

        public DecimalSeparatorCulture(string culture)
        {
            testCulture = CultureInfo.CreateSpecificCulture(culture);
        }

        [SetUp]
        public virtual void Setup()
        {
            backupCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = testCulture;
            WordStorage.Setup();
        }

        [TearDown]
        public virtual void TearDown()
        {
            Thread.CurrentThread.CurrentCulture = backupCulture;
        }

        [Test]
        public void FixedStringFormat()
        {
            Assert.AreEqual("1 0", FixedString.Format("{0} {1}", 1, 0));
            Assert.AreEqual("0.1 1.2", FixedString.Format("{0} {1}", 0.1f, 1.2f));
            Assert.AreEqual("error 500 in line 350: bubbly", FixedString.Format("error {0} in line {1}: {2}", 500, 350, "bubbly"));
        }

        [Test]
        public void FixedString32FormatExtension1Params()
        {
            FixedString32 aa = default;
            FixedString128 format = "{0}";
            FixedString32 arg0 = "a";
            aa.Format(format, arg0);
            Assert.AreEqual("a", aa);
        }

        [Test]
        public void FixedString32FormatExtension2Params()
        {
            FixedString32 aa = default;
            FixedString128 format = "{0} {1}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            aa.Format(format, arg0, arg1);
            Assert.AreEqual("a b", aa);
        }

        [Test]
        public void FixedString32FormatExtension3Params()
        {
            FixedString32 aa = default;
            FixedString128 format = "{0} {1} {2}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            aa.Format(format, arg0, arg1, arg2);
            Assert.AreEqual("a b c", aa);
        }

        [Test]
        public void FixedString32FormatExtension4Params()
        {
            FixedString32 aa = default;
            FixedString128 format = "{0} {1} {2} {3}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            aa.Format(format, arg0, arg1, arg2, arg3);
            Assert.AreEqual("a b c d", aa);
        }

        [Test]
        public void FixedString32FormatExtension5Params()
        {
            FixedString32 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4);
            Assert.AreEqual("a b c d e", aa);
        }

        [Test]
        public void FixedString32FormatExtension6Params()
        {
            FixedString32 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5);
            Assert.AreEqual("a b c d e f", aa);
        }

        [Test]
        public void FixedString32FormatExtension7Params()
        {
            FixedString32 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            Assert.AreEqual("a b c d e f g", aa);
        }

        [Test]
        public void FixedString32FormatExtension8Params()
        {
            FixedString32 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            Assert.AreEqual("a b c d e f g h", aa);
        }

        [Test]
        public void FixedString32FormatExtension9Params()
        {
            FixedString32 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7} {8}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            FixedString32 arg8 = "i";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            Assert.AreEqual("a b c d e f g h i", aa);
        }

        [Test]
        public void FixedString32FormatExtension10Params()
        {
            FixedString32 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7} {8} {9}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            FixedString32 arg8 = "i";
            FixedString32 arg9 = "j";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
            Assert.AreEqual("a b c d e f g h i j", aa);
        }

        [TestCase("Antidisestablishmentarianism")]
        [TestCase("‚Å£üåπüåªüå∑üåøüåµüåæ‚Å£")]
        public void FixedString32CopyFromBytesWorks(String a)
        {
            FixedString32 aa = default;
            var utf8 = Encoding.UTF8.GetBytes(a);
            unsafe
            {
                fixed(byte *b = utf8)
                aa.CopyFrom(b, (ushort)utf8.Length);
            }
            Assert.AreEqual(a, aa.ToString());
        }

        [TestCase("oooooooooooooooooooooooooooooo", CopyError.None)]
        [TestCase("ooooooooooooooooooooooooooooooo", CopyError.Truncation)]
        public void FixedString32AtMaximumSizeWorks(String a, CopyError expectedError)
        {
            FixedString32 aa = new FixedString32();
            var error = aa.CopyFrom(a);
            Assert.AreEqual(expectedError, error);
        }

        [TestCase("red", 0, 0, ParseError.Syntax)]
        [TestCase("0", 1, 0, ParseError.None)]
        [TestCase("-1", 2, -1, ParseError.None)]
        [TestCase("-0", 2, 0, ParseError.None)]
        [TestCase("100", 3, 100, ParseError.None)]
        [TestCase("-100", 4, -100, ParseError.None)]
        [TestCase("100.50", 3, 100, ParseError.None)]
        [TestCase("-100ab", 4, -100, ParseError.None)]
        [TestCase("2147483647", 10, 2147483647, ParseError.None)]
        [TestCase("-2147483648", 11, -2147483648, ParseError.None)]
        [TestCase("2147483648", 10, 0, ParseError.Overflow)]
        [TestCase("-2147483649", 11, 0, ParseError.Overflow)]
        public void FixedString32ParseIntWorks(String a, int expectedOffset, int expectedOutput, ParseError expectedResult)
        {
            FixedString32 aa = new FixedString32(a);
            int offset = 0;
            int output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase("red", 0, ParseError.Syntax)]
        [TestCase("0", 1,  ParseError.None)]
        [TestCase("-1", 2, ParseError.None)]
        [TestCase("-0", 2, ParseError.None)]
        [TestCase("100", 3, ParseError.None)]
        [TestCase("-100", 4, ParseError.None)]
        [TestCase("100.50", 6, ParseError.None)]
        [TestCase("2147483648", 10, ParseError.None)]
        [TestCase("-2147483649", 11, ParseError.None)]
        [TestCase("-10E10", 6, ParseError.None)]
        [TestCase("-10E-10", 7, ParseError.None)]
        [TestCase("-10E+10", 7, ParseError.None)]
        [TestCase("10E-40", 5, ParseError.Underflow)]
        [TestCase("10E+40", 5, ParseError.Overflow)]
        [TestCase("-Infinity", 9, ParseError.None)]
        [TestCase("Infinity", 8, ParseError.None)]
        [TestCase("1000001",       7, ParseError.None)]
        [TestCase("10000001",      8, ParseError.None)]
        [TestCase("100000001",     9, ParseError.None)]
        [TestCase("1000000001",   10, ParseError.None)]
        [TestCase("10000000001",  11, ParseError.None)]
        [TestCase("100000000001", 12, ParseError.None)]
        public void FixedString32ParseFloat(String unlocalizedString, int expectedOffset, ParseError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var localizedString = unlocalizedString.Replace('.', localizedDecimalSeparator);
            float expectedOutput = 0;
            try { expectedOutput = Single.Parse(localizedString); } catch {}
            FixedString32 nativeLocalizedString = new FixedString32(localizedString);
            int offset = 0;
            float output = 0;
            var result = nativeLocalizedString.Parse(ref offset, ref output, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void FixedString32FormatInt(int input)
        {
            var expectedOutput = input.ToString();
            FixedString32 aa = new FixedString32();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void FixedString32FormatLong(long input)
        {
            var expectedOutput = input.ToString();
            FixedString32 aa = new FixedString32();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        [TestCase(3.402823E+38f, FormatError.None)]
        public void FixedString32FormatFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = input.ToString();
            FixedString32 aa = new FixedString32();
            var result = aa.Format(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void FixedString32AppendInt(int input)
        {
            var expectedOutput = "foo" + input.ToString();
            FixedString32 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void FixedString32AppendLong(long input)
        {
            var expectedOutput = "foo" + input.ToString();
            FixedString32 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void FixedString32AppendFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = "foo" + input.ToString();
            FixedString32 aa = "foo";
            var result = aa.Append(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void FixedString32FormatNegativeZero()
        {
            float input = -0.0f;
            var expectedOutput = input.ToString();
            FixedString32 aa = new FixedString32();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase("en-US")]
        [TestCase("da-DK")]
        public void FixedString32ParseFloatLocale(String locale)
        {
            var original = CultureInfo.CurrentCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = new CultureInfo(locale);
                var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
                float value = 1.5f;
                FixedString32 native = new FixedString32();
                native.Format(value, localizedDecimalSeparator);
                var nativeResult = native.ToString();
                var managedResult = value.ToString();
                Assert.AreEqual(managedResult, nativeResult);
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = original;
            }
        }

        [Test]
        public void FixedString32ParseFloatNan()
        {
            FixedString32 aa = new FixedString32("NaN");
            int offset = 0;
            float output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(ParseError.None, result);
            Assert.IsTrue(Single.IsNaN(output));
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString32ToStringWorks(String a)
        {
            FixedString32 aa = new FixedString32(a);
            Assert.AreEqual(aa.ToString(), a);
        }

        [TestCase("monkey", "monkey")]
        [TestCase("yellow", "green")]
        [TestCase("violet", "Á¥ÖËâ≤", TestName = "{m}(Violet-Chinese-Red")]
        [TestCase("ÁªøËâ≤", "ËìùËâ≤", TestName = "{m}(Chinese-Green-Blue")]
        [TestCase("ÈùõËìùËâ≤", "Á¥´ÁΩóÂÖ∞Ëâ≤", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "Êùë‰∏äÊò•Ê®π", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("‰∏âÂ≥∂ Áî±Á¥ÄÂ§´", "ÂêâÊú¨„Å∞„Å™„Å™", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void FixedString32EqualsWorks(String a, String b)
        {
            FixedString32 aa = new FixedString32(a);
            FixedString32 bb = new FixedString32(b);
            Assert.AreEqual(aa.Equals(bb), a.Equals(b));
        }

        [Test]
        public void FixedString32ForEach()
        {
            FixedString32 actual = "AüåïZüåë";
            FixedListInt32 expected = default;
            expected.Add('A');
            expected.Add(0x1F315);
            expected.Add('Z');
            expected.Add(0x1F311);
            int index = 0;
            foreach (var rune in actual)
            {
                Assert.AreEqual(expected[index], rune.value);
                ++index;
            }
        }

        [Test]
        public void FixedString32RuneConstructor()
        {
            Assert.AreEqual("aaaaa", new FixedString32(new Unicode.Rune {value = 'a'}, 5));
        }

        [Test]
        public void FixedString32IndexOf()
        {
            FixedString32 a = "bookkeeper bookkeeper";
            FixedString32 b = "ookkee";
            Assert.AreEqual(1, a.IndexOf(b));
            Assert.AreEqual(-1, b.IndexOf(a));
        }

        [Test]
        public void FixedString32LastIndexOf()
        {
            FixedString32 a = "bookkeeper bookkeeper";
            FixedString32 b = "ookkee";
            Assert.AreEqual(12, a.LastIndexOf(b));
            Assert.AreEqual(-1, b.LastIndexOf(a));
        }

        [Test]
        public void FixedString32Contains()
        {
            FixedString32 a = "bookkeeper";
            FixedString32 b = "ookkee";
            Assert.AreEqual(true, a.Contains(b));
        }

        [Test]
        public void FixedString32Comparisons()
        {
            FixedString32 a = "apple";
            FixedString32 b = "banana";
            Assert.AreEqual(false, a == b);
            Assert.AreEqual(true, a != b);
        }

        [Test]
        public void FixedString32ToFixedList()
        {
            FixedString32 a = "0123";
            ref var b = ref a.AsFixedList;
            Assert.AreEqual(4, b.Length);
            Assert.AreEqual('0', b[0]);
            Assert.AreEqual('1', b[1]);
            Assert.AreEqual('2', b[2]);
            Assert.AreEqual('3', b[3]);
            b.Add((byte)'4');
            Assert.AreEqual("01234", a);
        }

        [Test]
        public void FixedString32SizeOf()
        {
            Assert.AreEqual(UnsafeUtility.SizeOf<FixedString32>(), 32);
        }

        [TestCase("red", new byte[] {3, 0, 114, 101, 100}, TestName = "red")]
        [TestCase("Á¥ÖËâ≤", new byte[] {6, 0, 231, 180, 133, 232, 137, 178}, TestName = "{m}(Chinese-Red)")]
        [TestCase("—Ü—Ä–≤–µ–Ω–∞", new byte[] {12, 0, 209, 134, 209, 128, 208, 178, 208, 181, 208, 189, 208, 176}, TestName = "{m}(Serbian-Red)")]
        [TestCase("George Washington", new byte[] {17, 0, 71, 101, 111, 114, 103, 101, 32, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110}, TestName = "George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", new byte[] {12, 0, 230, 157, 145, 228, 184, 138, 230, 152, 165, 230, 168, 185}, TestName = "{m}(HarukiMurakami)")]
        unsafe public void FixedString32Layout(String a, byte[] expected)
        {
            fixed(byte* expectedBytes = expected)
            {
                FixedString32 actual = a;
                byte* actualBytes = (byte*)&actual;
                Assert.AreEqual(0, UnsafeUtility.MemCmp(expectedBytes, actualBytes, expected.Length));
            }
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString32ToFixedString64Works(String a)
        {
            var b = new FixedString32(a);
            var c = new FixedString64(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString32ToFixedString128Works(String a)
        {
            var b = new FixedString32(a);
            var c = new FixedString128(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString32ToFixedString512Works(String a)
        {
            var b = new FixedString32(a);
            var c = new FixedString512(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString32ToFixedString4096Works(String a)
        {
            var b = new FixedString32(a);
            var c = new FixedString4096(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [Test]
        public void FixedString64FormatExtension1Params()
        {
            FixedString64 aa = default;
            FixedString128 format = "{0}";
            FixedString32 arg0 = "a";
            aa.Format(format, arg0);
            Assert.AreEqual("a", aa);
        }

        [Test]
        public void FixedString64FormatExtension2Params()
        {
            FixedString64 aa = default;
            FixedString128 format = "{0} {1}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            aa.Format(format, arg0, arg1);
            Assert.AreEqual("a b", aa);
        }

        [Test]
        public void FixedString64FormatExtension3Params()
        {
            FixedString64 aa = default;
            FixedString128 format = "{0} {1} {2}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            aa.Format(format, arg0, arg1, arg2);
            Assert.AreEqual("a b c", aa);
        }

        [Test]
        public void FixedString64FormatExtension4Params()
        {
            FixedString64 aa = default;
            FixedString128 format = "{0} {1} {2} {3}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            aa.Format(format, arg0, arg1, arg2, arg3);
            Assert.AreEqual("a b c d", aa);
        }

        [Test]
        public void FixedString64FormatExtension5Params()
        {
            FixedString64 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4);
            Assert.AreEqual("a b c d e", aa);
        }

        [Test]
        public void FixedString64FormatExtension6Params()
        {
            FixedString64 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5);
            Assert.AreEqual("a b c d e f", aa);
        }

        [Test]
        public void FixedString64FormatExtension7Params()
        {
            FixedString64 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            Assert.AreEqual("a b c d e f g", aa);
        }

        [Test]
        public void FixedString64FormatExtension8Params()
        {
            FixedString64 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            Assert.AreEqual("a b c d e f g h", aa);
        }

        [Test]
        public void FixedString64FormatExtension9Params()
        {
            FixedString64 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7} {8}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            FixedString32 arg8 = "i";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            Assert.AreEqual("a b c d e f g h i", aa);
        }

        [Test]
        public void FixedString64FormatExtension10Params()
        {
            FixedString64 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7} {8} {9}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            FixedString32 arg8 = "i";
            FixedString32 arg9 = "j";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
            Assert.AreEqual("a b c d e f g h i j", aa);
        }

        [TestCase("Antidisestablishmentarianism")]
        [TestCase("‚Å£üåπüåªüå∑üåøüåµüåæ‚Å£")]
        public void FixedString64CopyFromBytesWorks(String a)
        {
            FixedString64 aa = default;
            var utf8 = Encoding.UTF8.GetBytes(a);
            unsafe
            {
                fixed(byte *b = utf8)
                aa.CopyFrom(b, (ushort)utf8.Length);
            }
            Assert.AreEqual(a, aa.ToString());
        }

        [TestCase("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", CopyError.None)]
        [TestCase("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", CopyError.Truncation)]
        public void FixedString64AtMaximumSizeWorks(String a, CopyError expectedError)
        {
            FixedString64 aa = new FixedString64();
            var error = aa.CopyFrom(a);
            Assert.AreEqual(expectedError, error);
        }

        [TestCase("red", 0, 0, ParseError.Syntax)]
        [TestCase("0", 1, 0, ParseError.None)]
        [TestCase("-1", 2, -1, ParseError.None)]
        [TestCase("-0", 2, 0, ParseError.None)]
        [TestCase("100", 3, 100, ParseError.None)]
        [TestCase("-100", 4, -100, ParseError.None)]
        [TestCase("100.50", 3, 100, ParseError.None)]
        [TestCase("-100ab", 4, -100, ParseError.None)]
        [TestCase("2147483647", 10, 2147483647, ParseError.None)]
        [TestCase("-2147483648", 11, -2147483648, ParseError.None)]
        [TestCase("2147483648", 10, 0, ParseError.Overflow)]
        [TestCase("-2147483649", 11, 0, ParseError.Overflow)]
        public void FixedString64ParseIntWorks(String a, int expectedOffset, int expectedOutput, ParseError expectedResult)
        {
            FixedString64 aa = new FixedString64(a);
            int offset = 0;
            int output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase("red", 0, ParseError.Syntax)]
        [TestCase("0", 1,  ParseError.None)]
        [TestCase("-1", 2, ParseError.None)]
        [TestCase("-0", 2, ParseError.None)]
        [TestCase("100", 3, ParseError.None)]
        [TestCase("-100", 4, ParseError.None)]
        [TestCase("100.50", 6, ParseError.None)]
        [TestCase("2147483648", 10, ParseError.None)]
        [TestCase("-2147483649", 11, ParseError.None)]
        [TestCase("-10E10", 6, ParseError.None)]
        [TestCase("-10E-10", 7, ParseError.None)]
        [TestCase("-10E+10", 7, ParseError.None)]
        [TestCase("10E-40", 5, ParseError.Underflow)]
        [TestCase("10E+40", 5, ParseError.Overflow)]
        [TestCase("-Infinity", 9, ParseError.None)]
        [TestCase("Infinity", 8, ParseError.None)]
        [TestCase("1000001",       7, ParseError.None)]
        [TestCase("10000001",      8, ParseError.None)]
        [TestCase("100000001",     9, ParseError.None)]
        [TestCase("1000000001",   10, ParseError.None)]
        [TestCase("10000000001",  11, ParseError.None)]
        [TestCase("100000000001", 12, ParseError.None)]
        public void FixedString64ParseFloat(String unlocalizedString, int expectedOffset, ParseError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var localizedString = unlocalizedString.Replace('.', localizedDecimalSeparator);
            float expectedOutput = 0;
            try { expectedOutput = Single.Parse(localizedString); } catch {}
            FixedString64 nativeLocalizedString = new FixedString64(localizedString);
            int offset = 0;
            float output = 0;
            var result = nativeLocalizedString.Parse(ref offset, ref output, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void FixedString64FormatInt(int input)
        {
            var expectedOutput = input.ToString();
            FixedString64 aa = new FixedString64();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void FixedString64FormatLong(long input)
        {
            var expectedOutput = input.ToString();
            FixedString64 aa = new FixedString64();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        [TestCase(3.402823E+38f, FormatError.None)]
        public void FixedString64FormatFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = input.ToString();
            FixedString64 aa = new FixedString64();
            var result = aa.Format(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void FixedString64AppendInt(int input)
        {
            var expectedOutput = "foo" + input.ToString();
            FixedString64 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void FixedString64AppendLong(long input)
        {
            var expectedOutput = "foo" + input.ToString();
            FixedString64 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void FixedString64AppendFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = "foo" + input.ToString();
            FixedString64 aa = "foo";
            var result = aa.Append(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void FixedString64FormatNegativeZero()
        {
            float input = -0.0f;
            var expectedOutput = input.ToString();
            FixedString64 aa = new FixedString64();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase("en-US")]
        [TestCase("da-DK")]
        public void FixedString64ParseFloatLocale(String locale)
        {
            var original = CultureInfo.CurrentCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = new CultureInfo(locale);
                var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
                float value = 1.5f;
                FixedString64 native = new FixedString64();
                native.Format(value, localizedDecimalSeparator);
                var nativeResult = native.ToString();
                var managedResult = value.ToString();
                Assert.AreEqual(managedResult, nativeResult);
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = original;
            }
        }

        [Test]
        public void FixedString64ParseFloatNan()
        {
            FixedString64 aa = new FixedString64("NaN");
            int offset = 0;
            float output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(ParseError.None, result);
            Assert.IsTrue(Single.IsNaN(output));
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString64ToStringWorks(String a)
        {
            FixedString64 aa = new FixedString64(a);
            Assert.AreEqual(aa.ToString(), a);
        }

        [TestCase("monkey", "monkey")]
        [TestCase("yellow", "green")]
        [TestCase("violet", "Á¥ÖËâ≤", TestName = "{m}(Violet-Chinese-Red")]
        [TestCase("ÁªøËâ≤", "ËìùËâ≤", TestName = "{m}(Chinese-Green-Blue")]
        [TestCase("ÈùõËìùËâ≤", "Á¥´ÁΩóÂÖ∞Ëâ≤", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "Êùë‰∏äÊò•Ê®π", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("‰∏âÂ≥∂ Áî±Á¥ÄÂ§´", "ÂêâÊú¨„Å∞„Å™„Å™", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void FixedString64EqualsWorks(String a, String b)
        {
            FixedString64 aa = new FixedString64(a);
            FixedString64 bb = new FixedString64(b);
            Assert.AreEqual(aa.Equals(bb), a.Equals(b));
        }

        [Test]
        public void FixedString64ForEach()
        {
            FixedString64 actual = "AüåïZüåë";
            FixedListInt32 expected = default;
            expected.Add('A');
            expected.Add(0x1F315);
            expected.Add('Z');
            expected.Add(0x1F311);
            int index = 0;
            foreach (var rune in actual)
            {
                Assert.AreEqual(expected[index], rune.value);
                ++index;
            }
        }

        [Test]
        public void FixedString64RuneConstructor()
        {
            Assert.AreEqual("aaaaa", new FixedString64(new Unicode.Rune {value = 'a'}, 5));
        }

        [Test]
        public void FixedString64IndexOf()
        {
            FixedString64 a = "bookkeeper bookkeeper";
            FixedString64 b = "ookkee";
            Assert.AreEqual(1, a.IndexOf(b));
            Assert.AreEqual(-1, b.IndexOf(a));
        }

        [Test]
        public void FixedString64LastIndexOf()
        {
            FixedString64 a = "bookkeeper bookkeeper";
            FixedString64 b = "ookkee";
            Assert.AreEqual(12, a.LastIndexOf(b));
            Assert.AreEqual(-1, b.LastIndexOf(a));
        }

        [Test]
        public void FixedString64Contains()
        {
            FixedString64 a = "bookkeeper";
            FixedString64 b = "ookkee";
            Assert.AreEqual(true, a.Contains(b));
        }

        [Test]
        public void FixedString64Comparisons()
        {
            FixedString64 a = "apple";
            FixedString64 b = "banana";
            Assert.AreEqual(false, a == b);
            Assert.AreEqual(true, a != b);
        }

        [Test]
        public void FixedString64ToFixedList()
        {
            FixedString64 a = "0123";
            ref var b = ref a.AsFixedList;
            Assert.AreEqual(4, b.Length);
            Assert.AreEqual('0', b[0]);
            Assert.AreEqual('1', b[1]);
            Assert.AreEqual('2', b[2]);
            Assert.AreEqual('3', b[3]);
            b.Add((byte)'4');
            Assert.AreEqual("01234", a);
        }

        [Test]
        public void FixedString64SizeOf()
        {
            Assert.AreEqual(UnsafeUtility.SizeOf<FixedString64>(), 64);
        }

        [TestCase("red", new byte[] {3, 0, 114, 101, 100}, TestName = "red")]
        [TestCase("Á¥ÖËâ≤", new byte[] {6, 0, 231, 180, 133, 232, 137, 178}, TestName = "{m}(Chinese-Red)")]
        [TestCase("—Ü—Ä–≤–µ–Ω–∞", new byte[] {12, 0, 209, 134, 209, 128, 208, 178, 208, 181, 208, 189, 208, 176}, TestName = "{m}(Serbian-Red)")]
        [TestCase("George Washington", new byte[] {17, 0, 71, 101, 111, 114, 103, 101, 32, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110}, TestName = "George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", new byte[] {12, 0, 230, 157, 145, 228, 184, 138, 230, 152, 165, 230, 168, 185}, TestName = "{m}(HarukiMurakami)")]
        [TestCase("üåïüåñüåóüåòüåëüåíüåìüåî", new byte[] {32, 0, 240, 159, 140, 149, 240, 159, 140, 150, 240, 159, 140, 151, 240, 159, 140, 152, 240, 159, 140, 145, 240, 159, 140, 146, 240, 159, 140, 147, 240, 159, 140, 148}, TestName = "{m}(MoonPhases)")]
        [TestCase("ùíûùíØùíÆùíüùí≥ùí©ùí´ùí¢", new byte[] {32, 0, 240, 157, 146, 158, 240, 157, 146, 175, 240, 157, 146, 174, 240, 157, 146, 159, 240, 157, 146, 179, 240, 157, 146, 169, 240, 157, 146, 171, 240, 157, 146, 162}, TestName = "{m}(Cursive)")]
        [TestCase("Î°úÎßàÎäî ÌïòÎ£®ÏïÑÏπ®Ïóê Ïù¥Î£®Ïñ¥ÏßÑ Í≤ÉÏù¥ ÏïÑÎãàÎã§", new byte[] {55, 0, 235, 161, 156, 235, 167, 136, 235, 138, 148, 32, 237, 149, 152, 235, 163, 168, 236, 149, 132, 236, 185, 168, 236, 151, 144, 32, 236, 157, 180, 235, 163, 168, 236, 150, 180, 236, 167, 132, 32, 234, 178, 131, 236, 157, 180, 32, 236, 149, 132, 235, 139, 136, 235, 139, 164}, TestName = "{m}(Korean - Rome was not made overnight)")]
        unsafe public void FixedString64Layout(String a, byte[] expected)
        {
            fixed(byte* expectedBytes = expected)
            {
                FixedString64 actual = a;
                byte* actualBytes = (byte*)&actual;
                Assert.AreEqual(0, UnsafeUtility.MemCmp(expectedBytes, actualBytes, expected.Length));
            }
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString64ToFixedString32Works(String a)
        {
            var b = new FixedString64(a);
            var c = new FixedString32(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString64ToFixedString128Works(String a)
        {
            var b = new FixedString64(a);
            var c = new FixedString128(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString64ToFixedString512Works(String a)
        {
            var b = new FixedString64(a);
            var c = new FixedString512(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString64ToFixedString4096Works(String a)
        {
            var b = new FixedString64(a);
            var c = new FixedString4096(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [Test]
        public void FixedString128FormatExtension1Params()
        {
            FixedString128 aa = default;
            FixedString128 format = "{0}";
            FixedString32 arg0 = "a";
            aa.Format(format, arg0);
            Assert.AreEqual("a", aa);
        }

        [Test]
        public void FixedString128FormatExtension2Params()
        {
            FixedString128 aa = default;
            FixedString128 format = "{0} {1}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            aa.Format(format, arg0, arg1);
            Assert.AreEqual("a b", aa);
        }

        [Test]
        public void FixedString128FormatExtension3Params()
        {
            FixedString128 aa = default;
            FixedString128 format = "{0} {1} {2}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            aa.Format(format, arg0, arg1, arg2);
            Assert.AreEqual("a b c", aa);
        }

        [Test]
        public void FixedString128FormatExtension4Params()
        {
            FixedString128 aa = default;
            FixedString128 format = "{0} {1} {2} {3}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            aa.Format(format, arg0, arg1, arg2, arg3);
            Assert.AreEqual("a b c d", aa);
        }

        [Test]
        public void FixedString128FormatExtension5Params()
        {
            FixedString128 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4);
            Assert.AreEqual("a b c d e", aa);
        }

        [Test]
        public void FixedString128FormatExtension6Params()
        {
            FixedString128 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5);
            Assert.AreEqual("a b c d e f", aa);
        }

        [Test]
        public void FixedString128FormatExtension7Params()
        {
            FixedString128 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            Assert.AreEqual("a b c d e f g", aa);
        }

        [Test]
        public void FixedString128FormatExtension8Params()
        {
            FixedString128 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            Assert.AreEqual("a b c d e f g h", aa);
        }

        [Test]
        public void FixedString128FormatExtension9Params()
        {
            FixedString128 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7} {8}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            FixedString32 arg8 = "i";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            Assert.AreEqual("a b c d e f g h i", aa);
        }

        [Test]
        public void FixedString128FormatExtension10Params()
        {
            FixedString128 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7} {8} {9}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            FixedString32 arg8 = "i";
            FixedString32 arg9 = "j";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
            Assert.AreEqual("a b c d e f g h i j", aa);
        }

        [TestCase("Antidisestablishmentarianism")]
        [TestCase("‚Å£üåπüåªüå∑üåøüåµüåæ‚Å£")]
        public void FixedString128CopyFromBytesWorks(String a)
        {
            FixedString128 aa = default;
            var utf8 = Encoding.UTF8.GetBytes(a);
            unsafe
            {
                fixed(byte *b = utf8)
                aa.CopyFrom(b, (ushort)utf8.Length);
            }
            Assert.AreEqual(a, aa.ToString());
        }

        [TestCase("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", CopyError.None)]
        [TestCase("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", CopyError.Truncation)]
        public void FixedString128AtMaximumSizeWorks(String a, CopyError expectedError)
        {
            FixedString128 aa = new FixedString128();
            var error = aa.CopyFrom(a);
            Assert.AreEqual(expectedError, error);
        }

        [TestCase("red", 0, 0, ParseError.Syntax)]
        [TestCase("0", 1, 0, ParseError.None)]
        [TestCase("-1", 2, -1, ParseError.None)]
        [TestCase("-0", 2, 0, ParseError.None)]
        [TestCase("100", 3, 100, ParseError.None)]
        [TestCase("-100", 4, -100, ParseError.None)]
        [TestCase("100.50", 3, 100, ParseError.None)]
        [TestCase("-100ab", 4, -100, ParseError.None)]
        [TestCase("2147483647", 10, 2147483647, ParseError.None)]
        [TestCase("-2147483648", 11, -2147483648, ParseError.None)]
        [TestCase("2147483648", 10, 0, ParseError.Overflow)]
        [TestCase("-2147483649", 11, 0, ParseError.Overflow)]
        public void FixedString128ParseIntWorks(String a, int expectedOffset, int expectedOutput, ParseError expectedResult)
        {
            FixedString128 aa = new FixedString128(a);
            int offset = 0;
            int output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase("red", 0, ParseError.Syntax)]
        [TestCase("0", 1,  ParseError.None)]
        [TestCase("-1", 2, ParseError.None)]
        [TestCase("-0", 2, ParseError.None)]
        [TestCase("100", 3, ParseError.None)]
        [TestCase("-100", 4, ParseError.None)]
        [TestCase("100.50", 6, ParseError.None)]
        [TestCase("2147483648", 10, ParseError.None)]
        [TestCase("-2147483649", 11, ParseError.None)]
        [TestCase("-10E10", 6, ParseError.None)]
        [TestCase("-10E-10", 7, ParseError.None)]
        [TestCase("-10E+10", 7, ParseError.None)]
        [TestCase("10E-40", 5, ParseError.Underflow)]
        [TestCase("10E+40", 5, ParseError.Overflow)]
        [TestCase("-Infinity", 9, ParseError.None)]
        [TestCase("Infinity", 8, ParseError.None)]
        [TestCase("1000001",       7, ParseError.None)]
        [TestCase("10000001",      8, ParseError.None)]
        [TestCase("100000001",     9, ParseError.None)]
        [TestCase("1000000001",   10, ParseError.None)]
        [TestCase("10000000001",  11, ParseError.None)]
        [TestCase("100000000001", 12, ParseError.None)]
        public void FixedString128ParseFloat(String unlocalizedString, int expectedOffset, ParseError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var localizedString = unlocalizedString.Replace('.', localizedDecimalSeparator);
            float expectedOutput = 0;
            try { expectedOutput = Single.Parse(localizedString); } catch {}
            FixedString128 nativeLocalizedString = new FixedString128(localizedString);
            int offset = 0;
            float output = 0;
            var result = nativeLocalizedString.Parse(ref offset, ref output, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void FixedString128FormatInt(int input)
        {
            var expectedOutput = input.ToString();
            FixedString128 aa = new FixedString128();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void FixedString128FormatLong(long input)
        {
            var expectedOutput = input.ToString();
            FixedString128 aa = new FixedString128();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        [TestCase(3.402823E+38f, FormatError.None)]
        public void FixedString128FormatFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = input.ToString();
            FixedString128 aa = new FixedString128();
            var result = aa.Format(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void FixedString128AppendInt(int input)
        {
            var expectedOutput = "foo" + input.ToString();
            FixedString128 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void FixedString128AppendLong(long input)
        {
            var expectedOutput = "foo" + input.ToString();
            FixedString128 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void FixedString128AppendFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = "foo" + input.ToString();
            FixedString128 aa = "foo";
            var result = aa.Append(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void FixedString128FormatNegativeZero()
        {
            float input = -0.0f;
            var expectedOutput = input.ToString();
            FixedString128 aa = new FixedString128();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase("en-US")]
        [TestCase("da-DK")]
        public void FixedString128ParseFloatLocale(String locale)
        {
            var original = CultureInfo.CurrentCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = new CultureInfo(locale);
                var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
                float value = 1.5f;
                FixedString128 native = new FixedString128();
                native.Format(value, localizedDecimalSeparator);
                var nativeResult = native.ToString();
                var managedResult = value.ToString();
                Assert.AreEqual(managedResult, nativeResult);
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = original;
            }
        }

        [Test]
        public void FixedString128ParseFloatNan()
        {
            FixedString128 aa = new FixedString128("NaN");
            int offset = 0;
            float output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(ParseError.None, result);
            Assert.IsTrue(Single.IsNaN(output));
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString128ToStringWorks(String a)
        {
            FixedString128 aa = new FixedString128(a);
            Assert.AreEqual(aa.ToString(), a);
        }

        [TestCase("monkey", "monkey")]
        [TestCase("yellow", "green")]
        [TestCase("violet", "Á¥ÖËâ≤", TestName = "{m}(Violet-Chinese-Red")]
        [TestCase("ÁªøËâ≤", "ËìùËâ≤", TestName = "{m}(Chinese-Green-Blue")]
        [TestCase("ÈùõËìùËâ≤", "Á¥´ÁΩóÂÖ∞Ëâ≤", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "Êùë‰∏äÊò•Ê®π", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("‰∏âÂ≥∂ Áî±Á¥ÄÂ§´", "ÂêâÊú¨„Å∞„Å™„Å™", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void FixedString128EqualsWorks(String a, String b)
        {
            FixedString128 aa = new FixedString128(a);
            FixedString128 bb = new FixedString128(b);
            Assert.AreEqual(aa.Equals(bb), a.Equals(b));
        }

        [Test]
        public void FixedString128ForEach()
        {
            FixedString128 actual = "AüåïZüåë";
            FixedListInt32 expected = default;
            expected.Add('A');
            expected.Add(0x1F315);
            expected.Add('Z');
            expected.Add(0x1F311);
            int index = 0;
            foreach (var rune in actual)
            {
                Assert.AreEqual(expected[index], rune.value);
                ++index;
            }
        }

        [Test]
        public void FixedString128RuneConstructor()
        {
            Assert.AreEqual("aaaaa", new FixedString128(new Unicode.Rune {value = 'a'}, 5));
        }

        [Test]
        public void FixedString128IndexOf()
        {
            FixedString128 a = "bookkeeper bookkeeper";
            FixedString128 b = "ookkee";
            Assert.AreEqual(1, a.IndexOf(b));
            Assert.AreEqual(-1, b.IndexOf(a));
        }

        [Test]
        public void FixedString128LastIndexOf()
        {
            FixedString128 a = "bookkeeper bookkeeper";
            FixedString128 b = "ookkee";
            Assert.AreEqual(12, a.LastIndexOf(b));
            Assert.AreEqual(-1, b.LastIndexOf(a));
        }

        [Test]
        public void FixedString128Contains()
        {
            FixedString128 a = "bookkeeper";
            FixedString128 b = "ookkee";
            Assert.AreEqual(true, a.Contains(b));
        }

        [Test]
        public void FixedString128Comparisons()
        {
            FixedString128 a = "apple";
            FixedString128 b = "banana";
            Assert.AreEqual(false, a == b);
            Assert.AreEqual(true, a != b);
        }

        [Test]
        public void FixedString128ToFixedList()
        {
            FixedString128 a = "0123";
            ref var b = ref a.AsFixedList;
            Assert.AreEqual(4, b.Length);
            Assert.AreEqual('0', b[0]);
            Assert.AreEqual('1', b[1]);
            Assert.AreEqual('2', b[2]);
            Assert.AreEqual('3', b[3]);
            b.Add((byte)'4');
            Assert.AreEqual("01234", a);
        }

        [Test]
        public void FixedString128SizeOf()
        {
            Assert.AreEqual(UnsafeUtility.SizeOf<FixedString128>(), 128);
        }

        [TestCase("red", new byte[] {3, 0, 114, 101, 100}, TestName = "red")]
        [TestCase("Á¥ÖËâ≤", new byte[] {6, 0, 231, 180, 133, 232, 137, 178}, TestName = "{m}(Chinese-Red)")]
        [TestCase("—Ü—Ä–≤–µ–Ω–∞", new byte[] {12, 0, 209, 134, 209, 128, 208, 178, 208, 181, 208, 189, 208, 176}, TestName = "{m}(Serbian-Red)")]
        [TestCase("George Washington", new byte[] {17, 0, 71, 101, 111, 114, 103, 101, 32, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110}, TestName = "George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", new byte[] {12, 0, 230, 157, 145, 228, 184, 138, 230, 152, 165, 230, 168, 185}, TestName = "{m}(HarukiMurakami)")]
        [TestCase("üåïüåñüåóüåòüåëüåíüåìüåî", new byte[] {32, 0, 240, 159, 140, 149, 240, 159, 140, 150, 240, 159, 140, 151, 240, 159, 140, 152, 240, 159, 140, 145, 240, 159, 140, 146, 240, 159, 140, 147, 240, 159, 140, 148}, TestName = "{m}(MoonPhases)")]
        [TestCase("ùíûùíØùíÆùíüùí≥ùí©ùí´ùí¢", new byte[] {32, 0, 240, 157, 146, 158, 240, 157, 146, 175, 240, 157, 146, 174, 240, 157, 146, 159, 240, 157, 146, 179, 240, 157, 146, 169, 240, 157, 146, 171, 240, 157, 146, 162}, TestName = "{m}(Cursive)")]
        [TestCase("Î°úÎßàÎäî ÌïòÎ£®ÏïÑÏπ®Ïóê Ïù¥Î£®Ïñ¥ÏßÑ Í≤ÉÏù¥ ÏïÑÎãàÎã§", new byte[] {55, 0, 235, 161, 156, 235, 167, 136, 235, 138, 148, 32, 237, 149, 152, 235, 163, 168, 236, 149, 132, 236, 185, 168, 236, 151, 144, 32, 236, 157, 180, 235, 163, 168, 236, 150, 180, 236, 167, 132, 32, 234, 178, 131, 236, 157, 180, 32, 236, 149, 132, 235, 139, 136, 235, 139, 164}, TestName = "{m}(Korean - Rome was not made overnight)")]
        [TestCase("–õ–∞–∫–æ —Ç–∏ —ò–µ –ø–ª–∏—Ç–∫—É –≤–æ–¥—É –∑–∞–º—É—Ç–∏—Ç–∏ –∏ –±—É–¥–∞–ª—É –Ω–∞—ô—É—Ç–∏—Ç–∏", new byte[] {90, 0, 208, 155, 208, 176, 208, 186, 208, 190, 32, 209, 130, 208, 184, 32, 209, 152, 208, 181, 32, 208, 191, 208, 187, 208, 184, 209, 130, 208, 186, 209, 131, 32, 208, 178, 208, 190, 208, 180, 209, 131, 32, 208, 183, 208, 176, 208, 188, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184, 32, 208, 184, 32, 208, 177, 209, 131, 208, 180, 208, 176, 208, 187, 209, 131, 32, 208, 189, 208, 176, 209, 153, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184}, TestName = "{m}(Serbian-Proverb)")]
        [TestCase("“Æ–Ω—ç–Ω “Ø–≥ —Ö—ç–ª—Å—ç–Ω —Ö“Ø–Ω–¥ –Ω–æ—ë–¥ ”©—Å—Ç—ç–π, “Ø—Ö—ç—Ä —É–Ω–∞—Å–∞–Ω —Ö“Ø–Ω–¥ –Ω–æ—Ö–æ–¥ ”©—Å—Ç—ç–π.", new byte[] {110, 0, 210, 174, 208, 189, 209, 141, 208, 189, 32, 210, 175, 208, 179, 32, 209, 133, 209, 141, 208, 187, 209, 129, 209, 141, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 145, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 44, 32, 210, 175, 209, 133, 209, 141, 209, 128, 32, 209, 131, 208, 189, 208, 176, 209, 129, 208, 176, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 133, 208, 190, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 46}, TestName = "{m}(Mongolian-Proverb1)")]
        unsafe public void FixedString128Layout(String a, byte[] expected)
        {
            fixed(byte* expectedBytes = expected)
            {
                FixedString128 actual = a;
                byte* actualBytes = (byte*)&actual;
                Assert.AreEqual(0, UnsafeUtility.MemCmp(expectedBytes, actualBytes, expected.Length));
            }
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString128ToFixedString32Works(String a)
        {
            var b = new FixedString128(a);
            var c = new FixedString32(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString128ToFixedString64Works(String a)
        {
            var b = new FixedString128(a);
            var c = new FixedString64(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString128ToFixedString512Works(String a)
        {
            var b = new FixedString128(a);
            var c = new FixedString512(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString128ToFixedString4096Works(String a)
        {
            var b = new FixedString128(a);
            var c = new FixedString4096(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [Test]
        public void FixedString512FormatExtension1Params()
        {
            FixedString512 aa = default;
            FixedString128 format = "{0}";
            FixedString32 arg0 = "a";
            aa.Format(format, arg0);
            Assert.AreEqual("a", aa);
        }

        [Test]
        public void FixedString512FormatExtension2Params()
        {
            FixedString512 aa = default;
            FixedString128 format = "{0} {1}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            aa.Format(format, arg0, arg1);
            Assert.AreEqual("a b", aa);
        }

        [Test]
        public void FixedString512FormatExtension3Params()
        {
            FixedString512 aa = default;
            FixedString128 format = "{0} {1} {2}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            aa.Format(format, arg0, arg1, arg2);
            Assert.AreEqual("a b c", aa);
        }

        [Test]
        public void FixedString512FormatExtension4Params()
        {
            FixedString512 aa = default;
            FixedString128 format = "{0} {1} {2} {3}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            aa.Format(format, arg0, arg1, arg2, arg3);
            Assert.AreEqual("a b c d", aa);
        }

        [Test]
        public void FixedString512FormatExtension5Params()
        {
            FixedString512 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4);
            Assert.AreEqual("a b c d e", aa);
        }

        [Test]
        public void FixedString512FormatExtension6Params()
        {
            FixedString512 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5);
            Assert.AreEqual("a b c d e f", aa);
        }

        [Test]
        public void FixedString512FormatExtension7Params()
        {
            FixedString512 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            Assert.AreEqual("a b c d e f g", aa);
        }

        [Test]
        public void FixedString512FormatExtension8Params()
        {
            FixedString512 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            Assert.AreEqual("a b c d e f g h", aa);
        }

        [Test]
        public void FixedString512FormatExtension9Params()
        {
            FixedString512 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7} {8}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            FixedString32 arg8 = "i";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            Assert.AreEqual("a b c d e f g h i", aa);
        }

        [Test]
        public void FixedString512FormatExtension10Params()
        {
            FixedString512 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7} {8} {9}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            FixedString32 arg8 = "i";
            FixedString32 arg9 = "j";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
            Assert.AreEqual("a b c d e f g h i j", aa);
        }

        [TestCase("Antidisestablishmentarianism")]
        [TestCase("‚Å£üåπüåªüå∑üåøüåµüåæ‚Å£")]
        public void FixedString512CopyFromBytesWorks(String a)
        {
            FixedString512 aa = default;
            var utf8 = Encoding.UTF8.GetBytes(a);
            unsafe
            {
                fixed(byte *b = utf8)
                aa.CopyFrom(b, (ushort)utf8.Length);
            }
            Assert.AreEqual(a, aa.ToString());
        }

        [TestCase("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", CopyError.None)]
        [TestCase("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", CopyError.Truncation)]
        public void FixedString512AtMaximumSizeWorks(String a, CopyError expectedError)
        {
            FixedString512 aa = new FixedString512();
            var error = aa.CopyFrom(a);
            Assert.AreEqual(expectedError, error);
        }

        [TestCase("red", 0, 0, ParseError.Syntax)]
        [TestCase("0", 1, 0, ParseError.None)]
        [TestCase("-1", 2, -1, ParseError.None)]
        [TestCase("-0", 2, 0, ParseError.None)]
        [TestCase("100", 3, 100, ParseError.None)]
        [TestCase("-100", 4, -100, ParseError.None)]
        [TestCase("100.50", 3, 100, ParseError.None)]
        [TestCase("-100ab", 4, -100, ParseError.None)]
        [TestCase("2147483647", 10, 2147483647, ParseError.None)]
        [TestCase("-2147483648", 11, -2147483648, ParseError.None)]
        [TestCase("2147483648", 10, 0, ParseError.Overflow)]
        [TestCase("-2147483649", 11, 0, ParseError.Overflow)]
        public void FixedString512ParseIntWorks(String a, int expectedOffset, int expectedOutput, ParseError expectedResult)
        {
            FixedString512 aa = new FixedString512(a);
            int offset = 0;
            int output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase("red", 0, ParseError.Syntax)]
        [TestCase("0", 1,  ParseError.None)]
        [TestCase("-1", 2, ParseError.None)]
        [TestCase("-0", 2, ParseError.None)]
        [TestCase("100", 3, ParseError.None)]
        [TestCase("-100", 4, ParseError.None)]
        [TestCase("100.50", 6, ParseError.None)]
        [TestCase("2147483648", 10, ParseError.None)]
        [TestCase("-2147483649", 11, ParseError.None)]
        [TestCase("-10E10", 6, ParseError.None)]
        [TestCase("-10E-10", 7, ParseError.None)]
        [TestCase("-10E+10", 7, ParseError.None)]
        [TestCase("10E-40", 5, ParseError.Underflow)]
        [TestCase("10E+40", 5, ParseError.Overflow)]
        [TestCase("-Infinity", 9, ParseError.None)]
        [TestCase("Infinity", 8, ParseError.None)]
        [TestCase("1000001",       7, ParseError.None)]
        [TestCase("10000001",      8, ParseError.None)]
        [TestCase("100000001",     9, ParseError.None)]
        [TestCase("1000000001",   10, ParseError.None)]
        [TestCase("10000000001",  11, ParseError.None)]
        [TestCase("100000000001", 12, ParseError.None)]
        public void FixedString512ParseFloat(String unlocalizedString, int expectedOffset, ParseError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var localizedString = unlocalizedString.Replace('.', localizedDecimalSeparator);
            float expectedOutput = 0;
            try { expectedOutput = Single.Parse(localizedString); } catch {}
            FixedString512 nativeLocalizedString = new FixedString512(localizedString);
            int offset = 0;
            float output = 0;
            var result = nativeLocalizedString.Parse(ref offset, ref output, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void FixedString512FormatInt(int input)
        {
            var expectedOutput = input.ToString();
            FixedString512 aa = new FixedString512();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void FixedString512FormatLong(long input)
        {
            var expectedOutput = input.ToString();
            FixedString512 aa = new FixedString512();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        [TestCase(3.402823E+38f, FormatError.None)]
        public void FixedString512FormatFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = input.ToString();
            FixedString512 aa = new FixedString512();
            var result = aa.Format(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void FixedString512AppendInt(int input)
        {
            var expectedOutput = "foo" + input.ToString();
            FixedString512 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void FixedString512AppendLong(long input)
        {
            var expectedOutput = "foo" + input.ToString();
            FixedString512 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void FixedString512AppendFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = "foo" + input.ToString();
            FixedString512 aa = "foo";
            var result = aa.Append(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void FixedString512FormatNegativeZero()
        {
            float input = -0.0f;
            var expectedOutput = input.ToString();
            FixedString512 aa = new FixedString512();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase("en-US")]
        [TestCase("da-DK")]
        public void FixedString512ParseFloatLocale(String locale)
        {
            var original = CultureInfo.CurrentCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = new CultureInfo(locale);
                var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
                float value = 1.5f;
                FixedString512 native = new FixedString512();
                native.Format(value, localizedDecimalSeparator);
                var nativeResult = native.ToString();
                var managedResult = value.ToString();
                Assert.AreEqual(managedResult, nativeResult);
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = original;
            }
        }

        [Test]
        public void FixedString512ParseFloatNan()
        {
            FixedString512 aa = new FixedString512("NaN");
            int offset = 0;
            float output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(ParseError.None, result);
            Assert.IsTrue(Single.IsNaN(output));
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString512ToStringWorks(String a)
        {
            FixedString512 aa = new FixedString512(a);
            Assert.AreEqual(aa.ToString(), a);
        }

        [TestCase("monkey", "monkey")]
        [TestCase("yellow", "green")]
        [TestCase("violet", "Á¥ÖËâ≤", TestName = "{m}(Violet-Chinese-Red")]
        [TestCase("ÁªøËâ≤", "ËìùËâ≤", TestName = "{m}(Chinese-Green-Blue")]
        [TestCase("ÈùõËìùËâ≤", "Á¥´ÁΩóÂÖ∞Ëâ≤", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "Êùë‰∏äÊò•Ê®π", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("‰∏âÂ≥∂ Áî±Á¥ÄÂ§´", "ÂêâÊú¨„Å∞„Å™„Å™", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void FixedString512EqualsWorks(String a, String b)
        {
            FixedString512 aa = new FixedString512(a);
            FixedString512 bb = new FixedString512(b);
            Assert.AreEqual(aa.Equals(bb), a.Equals(b));
        }

        [Test]
        public void FixedString512ForEach()
        {
            FixedString512 actual = "AüåïZüåë";
            FixedListInt32 expected = default;
            expected.Add('A');
            expected.Add(0x1F315);
            expected.Add('Z');
            expected.Add(0x1F311);
            int index = 0;
            foreach (var rune in actual)
            {
                Assert.AreEqual(expected[index], rune.value);
                ++index;
            }
        }

        [Test]
        public void FixedString512RuneConstructor()
        {
            Assert.AreEqual("aaaaa", new FixedString512(new Unicode.Rune {value = 'a'}, 5));
        }

        [Test]
        public void FixedString512IndexOf()
        {
            FixedString512 a = "bookkeeper bookkeeper";
            FixedString512 b = "ookkee";
            Assert.AreEqual(1, a.IndexOf(b));
            Assert.AreEqual(-1, b.IndexOf(a));
        }

        [Test]
        public void FixedString512LastIndexOf()
        {
            FixedString512 a = "bookkeeper bookkeeper";
            FixedString512 b = "ookkee";
            Assert.AreEqual(12, a.LastIndexOf(b));
            Assert.AreEqual(-1, b.LastIndexOf(a));
        }

        [Test]
        public void FixedString512Contains()
        {
            FixedString512 a = "bookkeeper";
            FixedString512 b = "ookkee";
            Assert.AreEqual(true, a.Contains(b));
        }

        [Test]
        public void FixedString512Comparisons()
        {
            FixedString512 a = "apple";
            FixedString512 b = "banana";
            Assert.AreEqual(false, a == b);
            Assert.AreEqual(true, a != b);
        }

        [Test]
        public void FixedString512ToFixedList()
        {
            FixedString512 a = "0123";
            ref var b = ref a.AsFixedList;
            Assert.AreEqual(4, b.Length);
            Assert.AreEqual('0', b[0]);
            Assert.AreEqual('1', b[1]);
            Assert.AreEqual('2', b[2]);
            Assert.AreEqual('3', b[3]);
            b.Add((byte)'4');
            Assert.AreEqual("01234", a);
        }

        [Test]
        public void FixedString512SizeOf()
        {
            Assert.AreEqual(UnsafeUtility.SizeOf<FixedString512>(), 512);
        }

        [TestCase("red", new byte[] {3, 0, 114, 101, 100}, TestName = "red")]
        [TestCase("Á¥ÖËâ≤", new byte[] {6, 0, 231, 180, 133, 232, 137, 178}, TestName = "{m}(Chinese-Red)")]
        [TestCase("—Ü—Ä–≤–µ–Ω–∞", new byte[] {12, 0, 209, 134, 209, 128, 208, 178, 208, 181, 208, 189, 208, 176}, TestName = "{m}(Serbian-Red)")]
        [TestCase("George Washington", new byte[] {17, 0, 71, 101, 111, 114, 103, 101, 32, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110}, TestName = "George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", new byte[] {12, 0, 230, 157, 145, 228, 184, 138, 230, 152, 165, 230, 168, 185}, TestName = "{m}(HarukiMurakami)")]
        [TestCase("üåïüåñüåóüåòüåëüåíüåìüåî", new byte[] {32, 0, 240, 159, 140, 149, 240, 159, 140, 150, 240, 159, 140, 151, 240, 159, 140, 152, 240, 159, 140, 145, 240, 159, 140, 146, 240, 159, 140, 147, 240, 159, 140, 148}, TestName = "{m}(MoonPhases)")]
        [TestCase("ùíûùíØùíÆùíüùí≥ùí©ùí´ùí¢", new byte[] {32, 0, 240, 157, 146, 158, 240, 157, 146, 175, 240, 157, 146, 174, 240, 157, 146, 159, 240, 157, 146, 179, 240, 157, 146, 169, 240, 157, 146, 171, 240, 157, 146, 162}, TestName = "{m}(Cursive)")]
        [TestCase("Î°úÎßàÎäî ÌïòÎ£®ÏïÑÏπ®Ïóê Ïù¥Î£®Ïñ¥ÏßÑ Í≤ÉÏù¥ ÏïÑÎãàÎã§", new byte[] {55, 0, 235, 161, 156, 235, 167, 136, 235, 138, 148, 32, 237, 149, 152, 235, 163, 168, 236, 149, 132, 236, 185, 168, 236, 151, 144, 32, 236, 157, 180, 235, 163, 168, 236, 150, 180, 236, 167, 132, 32, 234, 178, 131, 236, 157, 180, 32, 236, 149, 132, 235, 139, 136, 235, 139, 164}, TestName = "{m}(Korean - Rome was not made overnight)")]
        [TestCase("–õ–∞–∫–æ —Ç–∏ —ò–µ –ø–ª–∏—Ç–∫—É –≤–æ–¥—É –∑–∞–º—É—Ç–∏—Ç–∏ –∏ –±—É–¥–∞–ª—É –Ω–∞—ô—É—Ç–∏—Ç–∏", new byte[] {90, 0, 208, 155, 208, 176, 208, 186, 208, 190, 32, 209, 130, 208, 184, 32, 209, 152, 208, 181, 32, 208, 191, 208, 187, 208, 184, 209, 130, 208, 186, 209, 131, 32, 208, 178, 208, 190, 208, 180, 209, 131, 32, 208, 183, 208, 176, 208, 188, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184, 32, 208, 184, 32, 208, 177, 209, 131, 208, 180, 208, 176, 208, 187, 209, 131, 32, 208, 189, 208, 176, 209, 153, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184}, TestName = "{m}(Serbian-Proverb)")]
        [TestCase("“Æ–Ω—ç–Ω “Ø–≥ —Ö—ç–ª—Å—ç–Ω —Ö“Ø–Ω–¥ –Ω–æ—ë–¥ ”©—Å—Ç—ç–π, “Ø—Ö—ç—Ä —É–Ω–∞—Å–∞–Ω —Ö“Ø–Ω–¥ –Ω–æ—Ö–æ–¥ ”©—Å—Ç—ç–π.", new byte[] {110, 0, 210, 174, 208, 189, 209, 141, 208, 189, 32, 210, 175, 208, 179, 32, 209, 133, 209, 141, 208, 187, 209, 129, 209, 141, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 145, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 44, 32, 210, 175, 209, 133, 209, 141, 209, 128, 32, 209, 131, 208, 189, 208, 176, 209, 129, 208, 176, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 133, 208, 190, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 46}, TestName = "{m}(Mongolian-Proverb1)")]
        [TestCase("‡§® ‡§Ö‡§≠‡§ø‡§∂‡•á‡§ï‡•ã ‡§® ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§æ‡§∞‡§É ‡§∏‡§ø‡§Æ‡•ç‡§π‡§∏‡•ç‡§Ø ‡§ï‡•É‡§Ø‡§§‡•á ‡§µ‡§®‡•á‡§µ‡§ø‡§ï‡•ç‡§∞‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§§‡§∏‡§§‡•ç‡§µ‡§∏‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§Ø‡§Æ‡•á‡§µ ‡§Æ‡•É‡§ó‡•á‡§®‡•ç‡§¶‡•ç‡§∞‡§§‡§æ", new byte[] {218, 0, 224, 164, 168, 32, 224, 164, 133, 224, 164, 173, 224, 164, 191, 224, 164, 182, 224, 165, 135, 224, 164, 149, 224, 165, 139, 32, 224, 164, 168, 32, 224, 164, 184, 224, 164, 130, 224, 164, 184, 224, 165, 141, 224, 164, 149, 224, 164, 190, 224, 164, 176, 224, 164, 131, 32, 224, 164, 184, 224, 164, 191, 224, 164, 174, 224, 165, 141, 224, 164, 185, 224, 164, 184, 224, 165, 141, 224, 164, 175, 32, 224, 164, 149, 224, 165, 131, 224, 164, 175, 224, 164, 164, 224, 165, 135, 32, 224, 164, 181, 224, 164, 168, 224, 165, 135, 224, 164, 181, 224, 164, 191, 224, 164, 149, 224, 165, 141, 224, 164, 176, 224, 164, 174, 224, 164, 190, 224, 164, 176, 224, 165, 141, 224, 164, 156, 224, 164, 191, 224, 164, 164, 224, 164, 184, 224, 164, 164, 224, 165, 141, 224, 164, 181, 224, 164, 184, 224, 165, 141, 224, 164, 175, 32, 224, 164, 184, 224, 165, 141, 224, 164, 181, 224, 164, 175, 224, 164, 174, 224, 165, 135, 224, 164, 181, 32, 224, 164, 174, 224, 165, 131, 224, 164, 151, 224, 165, 135, 224, 164, 168, 224, 165, 141, 224, 164, 166, 224, 165, 141, 224, 164, 176, 224, 164, 164, 224, 164, 190}, TestName = "{m}(Hindi-Proverb3)")]
        unsafe public void FixedString512Layout(String a, byte[] expected)
        {
            fixed(byte* expectedBytes = expected)
            {
                FixedString512 actual = a;
                byte* actualBytes = (byte*)&actual;
                Assert.AreEqual(0, UnsafeUtility.MemCmp(expectedBytes, actualBytes, expected.Length));
            }
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString512ToFixedString32Works(String a)
        {
            var b = new FixedString512(a);
            var c = new FixedString32(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString512ToFixedString64Works(String a)
        {
            var b = new FixedString512(a);
            var c = new FixedString64(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString512ToFixedString128Works(String a)
        {
            var b = new FixedString512(a);
            var c = new FixedString128(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString512ToFixedString4096Works(String a)
        {
            var b = new FixedString512(a);
            var c = new FixedString4096(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [Test]
        public void FixedString4096FormatExtension1Params()
        {
            FixedString4096 aa = default;
            FixedString128 format = "{0}";
            FixedString32 arg0 = "a";
            aa.Format(format, arg0);
            Assert.AreEqual("a", aa);
        }

        [Test]
        public void FixedString4096FormatExtension2Params()
        {
            FixedString4096 aa = default;
            FixedString128 format = "{0} {1}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            aa.Format(format, arg0, arg1);
            Assert.AreEqual("a b", aa);
        }

        [Test]
        public void FixedString4096FormatExtension3Params()
        {
            FixedString4096 aa = default;
            FixedString128 format = "{0} {1} {2}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            aa.Format(format, arg0, arg1, arg2);
            Assert.AreEqual("a b c", aa);
        }

        [Test]
        public void FixedString4096FormatExtension4Params()
        {
            FixedString4096 aa = default;
            FixedString128 format = "{0} {1} {2} {3}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            aa.Format(format, arg0, arg1, arg2, arg3);
            Assert.AreEqual("a b c d", aa);
        }

        [Test]
        public void FixedString4096FormatExtension5Params()
        {
            FixedString4096 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4);
            Assert.AreEqual("a b c d e", aa);
        }

        [Test]
        public void FixedString4096FormatExtension6Params()
        {
            FixedString4096 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5);
            Assert.AreEqual("a b c d e f", aa);
        }

        [Test]
        public void FixedString4096FormatExtension7Params()
        {
            FixedString4096 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
            Assert.AreEqual("a b c d e f g", aa);
        }

        [Test]
        public void FixedString4096FormatExtension8Params()
        {
            FixedString4096 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
            Assert.AreEqual("a b c d e f g h", aa);
        }

        [Test]
        public void FixedString4096FormatExtension9Params()
        {
            FixedString4096 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7} {8}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            FixedString32 arg8 = "i";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            Assert.AreEqual("a b c d e f g h i", aa);
        }

        [Test]
        public void FixedString4096FormatExtension10Params()
        {
            FixedString4096 aa = default;
            FixedString128 format = "{0} {1} {2} {3} {4} {5} {6} {7} {8} {9}";
            FixedString32 arg0 = "a";
            FixedString32 arg1 = "b";
            FixedString32 arg2 = "c";
            FixedString32 arg3 = "d";
            FixedString32 arg4 = "e";
            FixedString32 arg5 = "f";
            FixedString32 arg6 = "g";
            FixedString32 arg7 = "h";
            FixedString32 arg8 = "i";
            FixedString32 arg9 = "j";
            aa.Format(format, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
            Assert.AreEqual("a b c d e f g h i j", aa);
        }

        [TestCase("Antidisestablishmentarianism")]
        [TestCase("‚Å£üåπüåªüå∑üåøüåµüåæ‚Å£")]
        public void FixedString4096CopyFromBytesWorks(String a)
        {
            FixedString4096 aa = default;
            var utf8 = Encoding.UTF8.GetBytes(a);
            unsafe
            {
                fixed(byte *b = utf8)
                aa.CopyFrom(b, (ushort)utf8.Length);
            }
            Assert.AreEqual(a, aa.ToString());
        }

        [TestCase("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", CopyError.None)]
        [TestCase("ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", CopyError.Truncation)]
        public void FixedString4096AtMaximumSizeWorks(String a, CopyError expectedError)
        {
            FixedString4096 aa = new FixedString4096();
            var error = aa.CopyFrom(a);
            Assert.AreEqual(expectedError, error);
        }

        [TestCase("red", 0, 0, ParseError.Syntax)]
        [TestCase("0", 1, 0, ParseError.None)]
        [TestCase("-1", 2, -1, ParseError.None)]
        [TestCase("-0", 2, 0, ParseError.None)]
        [TestCase("100", 3, 100, ParseError.None)]
        [TestCase("-100", 4, -100, ParseError.None)]
        [TestCase("100.50", 3, 100, ParseError.None)]
        [TestCase("-100ab", 4, -100, ParseError.None)]
        [TestCase("2147483647", 10, 2147483647, ParseError.None)]
        [TestCase("-2147483648", 11, -2147483648, ParseError.None)]
        [TestCase("2147483648", 10, 0, ParseError.Overflow)]
        [TestCase("-2147483649", 11, 0, ParseError.Overflow)]
        public void FixedString4096ParseIntWorks(String a, int expectedOffset, int expectedOutput, ParseError expectedResult)
        {
            FixedString4096 aa = new FixedString4096(a);
            int offset = 0;
            int output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase("red", 0, ParseError.Syntax)]
        [TestCase("0", 1,  ParseError.None)]
        [TestCase("-1", 2, ParseError.None)]
        [TestCase("-0", 2, ParseError.None)]
        [TestCase("100", 3, ParseError.None)]
        [TestCase("-100", 4, ParseError.None)]
        [TestCase("100.50", 6, ParseError.None)]
        [TestCase("2147483648", 10, ParseError.None)]
        [TestCase("-2147483649", 11, ParseError.None)]
        [TestCase("-10E10", 6, ParseError.None)]
        [TestCase("-10E-10", 7, ParseError.None)]
        [TestCase("-10E+10", 7, ParseError.None)]
        [TestCase("10E-40", 5, ParseError.Underflow)]
        [TestCase("10E+40", 5, ParseError.Overflow)]
        [TestCase("-Infinity", 9, ParseError.None)]
        [TestCase("Infinity", 8, ParseError.None)]
        [TestCase("1000001",       7, ParseError.None)]
        [TestCase("10000001",      8, ParseError.None)]
        [TestCase("100000001",     9, ParseError.None)]
        [TestCase("1000000001",   10, ParseError.None)]
        [TestCase("10000000001",  11, ParseError.None)]
        [TestCase("100000000001", 12, ParseError.None)]
        public void FixedString4096ParseFloat(String unlocalizedString, int expectedOffset, ParseError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var localizedString = unlocalizedString.Replace('.', localizedDecimalSeparator);
            float expectedOutput = 0;
            try { expectedOutput = Single.Parse(localizedString); } catch {}
            FixedString4096 nativeLocalizedString = new FixedString4096(localizedString);
            int offset = 0;
            float output = 0;
            var result = nativeLocalizedString.Parse(ref offset, ref output, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void FixedString4096FormatInt(int input)
        {
            var expectedOutput = input.ToString();
            FixedString4096 aa = new FixedString4096();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void FixedString4096FormatLong(long input)
        {
            var expectedOutput = input.ToString();
            FixedString4096 aa = new FixedString4096();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        [TestCase(3.402823E+38f, FormatError.None)]
        public void FixedString4096FormatFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = input.ToString();
            FixedString4096 aa = new FixedString4096();
            var result = aa.Format(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void FixedString4096AppendInt(int input)
        {
            var expectedOutput = "foo" + input.ToString();
            FixedString4096 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void FixedString4096AppendLong(long input)
        {
            var expectedOutput = "foo" + input.ToString();
            FixedString4096 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void FixedString4096AppendFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = "foo" + input.ToString();
            FixedString4096 aa = "foo";
            var result = aa.Append(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void FixedString4096FormatNegativeZero()
        {
            float input = -0.0f;
            var expectedOutput = input.ToString();
            FixedString4096 aa = new FixedString4096();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase("en-US")]
        [TestCase("da-DK")]
        public void FixedString4096ParseFloatLocale(String locale)
        {
            var original = CultureInfo.CurrentCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = new CultureInfo(locale);
                var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
                float value = 1.5f;
                FixedString4096 native = new FixedString4096();
                native.Format(value, localizedDecimalSeparator);
                var nativeResult = native.ToString();
                var managedResult = value.ToString();
                Assert.AreEqual(managedResult, nativeResult);
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = original;
            }
        }

        [Test]
        public void FixedString4096ParseFloatNan()
        {
            FixedString4096 aa = new FixedString4096("NaN");
            int offset = 0;
            float output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(ParseError.None, result);
            Assert.IsTrue(Single.IsNaN(output));
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString4096ToStringWorks(String a)
        {
            FixedString4096 aa = new FixedString4096(a);
            Assert.AreEqual(aa.ToString(), a);
        }

        [TestCase("monkey", "monkey")]
        [TestCase("yellow", "green")]
        [TestCase("violet", "Á¥ÖËâ≤", TestName = "{m}(Violet-Chinese-Red")]
        [TestCase("ÁªøËâ≤", "ËìùËâ≤", TestName = "{m}(Chinese-Green-Blue")]
        [TestCase("ÈùõËìùËâ≤", "Á¥´ÁΩóÂÖ∞Ëâ≤", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "Êùë‰∏äÊò•Ê®π", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("‰∏âÂ≥∂ Áî±Á¥ÄÂ§´", "ÂêâÊú¨„Å∞„Å™„Å™", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void FixedString4096EqualsWorks(String a, String b)
        {
            FixedString4096 aa = new FixedString4096(a);
            FixedString4096 bb = new FixedString4096(b);
            Assert.AreEqual(aa.Equals(bb), a.Equals(b));
        }

        [Test]
        public void FixedString4096ForEach()
        {
            FixedString4096 actual = "AüåïZüåë";
            FixedListInt32 expected = default;
            expected.Add('A');
            expected.Add(0x1F315);
            expected.Add('Z');
            expected.Add(0x1F311);
            int index = 0;
            foreach (var rune in actual)
            {
                Assert.AreEqual(expected[index], rune.value);
                ++index;
            }
        }

        [Test]
        public void FixedString4096RuneConstructor()
        {
            Assert.AreEqual("aaaaa", new FixedString4096(new Unicode.Rune {value = 'a'}, 5));
        }

        [Test]
        public void FixedString4096IndexOf()
        {
            FixedString4096 a = "bookkeeper bookkeeper";
            FixedString4096 b = "ookkee";
            Assert.AreEqual(1, a.IndexOf(b));
            Assert.AreEqual(-1, b.IndexOf(a));
        }

        [Test]
        public void FixedString4096LastIndexOf()
        {
            FixedString4096 a = "bookkeeper bookkeeper";
            FixedString4096 b = "ookkee";
            Assert.AreEqual(12, a.LastIndexOf(b));
            Assert.AreEqual(-1, b.LastIndexOf(a));
        }

        [Test]
        public void FixedString4096Contains()
        {
            FixedString4096 a = "bookkeeper";
            FixedString4096 b = "ookkee";
            Assert.AreEqual(true, a.Contains(b));
        }

        [Test]
        public void FixedString4096Comparisons()
        {
            FixedString4096 a = "apple";
            FixedString4096 b = "banana";
            Assert.AreEqual(false, a == b);
            Assert.AreEqual(true, a != b);
        }

        [Test]
        public void FixedString4096ToFixedList()
        {
            FixedString4096 a = "0123";
            ref var b = ref a.AsFixedList;
            Assert.AreEqual(4, b.Length);
            Assert.AreEqual('0', b[0]);
            Assert.AreEqual('1', b[1]);
            Assert.AreEqual('2', b[2]);
            Assert.AreEqual('3', b[3]);
            b.Add((byte)'4');
            Assert.AreEqual("01234", a);
        }

        [Test]
        public void FixedString4096SizeOf()
        {
            Assert.AreEqual(UnsafeUtility.SizeOf<FixedString4096>(), 4096);
        }

        [TestCase("red", new byte[] {3, 0, 114, 101, 100}, TestName = "red")]
        [TestCase("Á¥ÖËâ≤", new byte[] {6, 0, 231, 180, 133, 232, 137, 178}, TestName = "{m}(Chinese-Red)")]
        [TestCase("—Ü—Ä–≤–µ–Ω–∞", new byte[] {12, 0, 209, 134, 209, 128, 208, 178, 208, 181, 208, 189, 208, 176}, TestName = "{m}(Serbian-Red)")]
        [TestCase("George Washington", new byte[] {17, 0, 71, 101, 111, 114, 103, 101, 32, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110}, TestName = "George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", new byte[] {12, 0, 230, 157, 145, 228, 184, 138, 230, 152, 165, 230, 168, 185}, TestName = "{m}(HarukiMurakami)")]
        [TestCase("üåïüåñüåóüåòüåëüåíüåìüåî", new byte[] {32, 0, 240, 159, 140, 149, 240, 159, 140, 150, 240, 159, 140, 151, 240, 159, 140, 152, 240, 159, 140, 145, 240, 159, 140, 146, 240, 159, 140, 147, 240, 159, 140, 148}, TestName = "{m}(MoonPhases)")]
        [TestCase("ùíûùíØùíÆùíüùí≥ùí©ùí´ùí¢", new byte[] {32, 0, 240, 157, 146, 158, 240, 157, 146, 175, 240, 157, 146, 174, 240, 157, 146, 159, 240, 157, 146, 179, 240, 157, 146, 169, 240, 157, 146, 171, 240, 157, 146, 162}, TestName = "{m}(Cursive)")]
        [TestCase("Î°úÎßàÎäî ÌïòÎ£®ÏïÑÏπ®Ïóê Ïù¥Î£®Ïñ¥ÏßÑ Í≤ÉÏù¥ ÏïÑÎãàÎã§", new byte[] {55, 0, 235, 161, 156, 235, 167, 136, 235, 138, 148, 32, 237, 149, 152, 235, 163, 168, 236, 149, 132, 236, 185, 168, 236, 151, 144, 32, 236, 157, 180, 235, 163, 168, 236, 150, 180, 236, 167, 132, 32, 234, 178, 131, 236, 157, 180, 32, 236, 149, 132, 235, 139, 136, 235, 139, 164}, TestName = "{m}(Korean - Rome was not made overnight)")]
        [TestCase("–õ–∞–∫–æ —Ç–∏ —ò–µ –ø–ª–∏—Ç–∫—É –≤–æ–¥—É –∑–∞–º—É—Ç–∏—Ç–∏ –∏ –±—É–¥–∞–ª—É –Ω–∞—ô—É—Ç–∏—Ç–∏", new byte[] {90, 0, 208, 155, 208, 176, 208, 186, 208, 190, 32, 209, 130, 208, 184, 32, 209, 152, 208, 181, 32, 208, 191, 208, 187, 208, 184, 209, 130, 208, 186, 209, 131, 32, 208, 178, 208, 190, 208, 180, 209, 131, 32, 208, 183, 208, 176, 208, 188, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184, 32, 208, 184, 32, 208, 177, 209, 131, 208, 180, 208, 176, 208, 187, 209, 131, 32, 208, 189, 208, 176, 209, 153, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184}, TestName = "{m}(Serbian-Proverb)")]
        [TestCase("“Æ–Ω—ç–Ω “Ø–≥ —Ö—ç–ª—Å—ç–Ω —Ö“Ø–Ω–¥ –Ω–æ—ë–¥ ”©—Å—Ç—ç–π, “Ø—Ö—ç—Ä —É–Ω–∞—Å–∞–Ω —Ö“Ø–Ω–¥ –Ω–æ—Ö–æ–¥ ”©—Å—Ç—ç–π.", new byte[] {110, 0, 210, 174, 208, 189, 209, 141, 208, 189, 32, 210, 175, 208, 179, 32, 209, 133, 209, 141, 208, 187, 209, 129, 209, 141, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 145, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 44, 32, 210, 175, 209, 133, 209, 141, 209, 128, 32, 209, 131, 208, 189, 208, 176, 209, 129, 208, 176, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 133, 208, 190, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 46}, TestName = "{m}(Mongolian-Proverb1)")]
        [TestCase("‡§® ‡§Ö‡§≠‡§ø‡§∂‡•á‡§ï‡•ã ‡§® ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§æ‡§∞‡§É ‡§∏‡§ø‡§Æ‡•ç‡§π‡§∏‡•ç‡§Ø ‡§ï‡•É‡§Ø‡§§‡•á ‡§µ‡§®‡•á‡§µ‡§ø‡§ï‡•ç‡§∞‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§§‡§∏‡§§‡•ç‡§µ‡§∏‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§Ø‡§Æ‡•á‡§µ ‡§Æ‡•É‡§ó‡•á‡§®‡•ç‡§¶‡•ç‡§∞‡§§‡§æ", new byte[] {218, 0, 224, 164, 168, 32, 224, 164, 133, 224, 164, 173, 224, 164, 191, 224, 164, 182, 224, 165, 135, 224, 164, 149, 224, 165, 139, 32, 224, 164, 168, 32, 224, 164, 184, 224, 164, 130, 224, 164, 184, 224, 165, 141, 224, 164, 149, 224, 164, 190, 224, 164, 176, 224, 164, 131, 32, 224, 164, 184, 224, 164, 191, 224, 164, 174, 224, 165, 141, 224, 164, 185, 224, 164, 184, 224, 165, 141, 224, 164, 175, 32, 224, 164, 149, 224, 165, 131, 224, 164, 175, 224, 164, 164, 224, 165, 135, 32, 224, 164, 181, 224, 164, 168, 224, 165, 135, 224, 164, 181, 224, 164, 191, 224, 164, 149, 224, 165, 141, 224, 164, 176, 224, 164, 174, 224, 164, 190, 224, 164, 176, 224, 165, 141, 224, 164, 156, 224, 164, 191, 224, 164, 164, 224, 164, 184, 224, 164, 164, 224, 165, 141, 224, 164, 181, 224, 164, 184, 224, 165, 141, 224, 164, 175, 32, 224, 164, 184, 224, 165, 141, 224, 164, 181, 224, 164, 175, 224, 164, 174, 224, 165, 135, 224, 164, 181, 32, 224, 164, 174, 224, 165, 131, 224, 164, 151, 224, 165, 135, 224, 164, 168, 224, 165, 141, 224, 164, 166, 224, 165, 141, 224, 164, 176, 224, 164, 164, 224, 164, 190}, TestName = "{m}(Hindi-Proverb3)")]
        unsafe public void FixedString4096Layout(String a, byte[] expected)
        {
            fixed(byte* expectedBytes = expected)
            {
                FixedString4096 actual = a;
                byte* actualBytes = (byte*)&actual;
                Assert.AreEqual(0, UnsafeUtility.MemCmp(expectedBytes, actualBytes, expected.Length));
            }
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString4096ToFixedString32Works(String a)
        {
            var b = new FixedString4096(a);
            var c = new FixedString32(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString4096ToFixedString64Works(String a)
        {
            var b = new FixedString4096(a);
            var c = new FixedString64(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString4096ToFixedString128Works(String a)
        {
            var b = new FixedString4096(a);
            var c = new FixedString128(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("Á¥ÖËâ≤", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("Êùë‰∏äÊò•Ê®π", TestName = "{m}(HarukiMurakami)")]
        public void FixedString4096ToFixedString512Works(String a)
        {
            var b = new FixedString4096(a);
            var c = new FixedString512(b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }
    }
}
#endif
