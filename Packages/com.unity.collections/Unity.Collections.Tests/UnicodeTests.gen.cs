//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Samples/Packages/com.unity.collections/Unity.Collections.Tests/UnicodeTests.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#if !UNITY_DOTSPLAYER
using System;
using System.Globalization;
using System.Threading;
using NUnit.Framework;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;

namespace NativeStringTests
{
    [TestFixture("en-US")]
    [TestFixture("da-DK")]
    public class WordsTests
    {
        CultureInfo testCulture;
        CultureInfo backupCulture;

        public WordsTests(string culture)
        {
            testCulture = CultureInfo.CreateSpecificCulture(culture);
        }

        [SetUp]
        public virtual void Setup()
        {
            backupCulture = Thread.CurrentThread.CurrentCulture;
            Thread.CurrentThread.CurrentCulture = testCulture;
            WordStorage.Setup();
        }

        [TearDown]
        public virtual void TearDown()
        {
            Thread.CurrentThread.CurrentCulture = backupCulture;
        }

        [Test]
        public unsafe void Utf8EncodeDecode([Range(0, 0xD7FF, 997)] int input_ucs)
        {
            var converted = new byte[4];
            fixed(byte* c = converted)
            {
                ConversionError error;
                int write_length = 0;
                error = Unicode.UcsToUtf8(c, ref write_length, converted.Length, new Unicode.Rune {value = input_ucs});
                Assert.AreEqual(ConversionError.None, error);
                int read_length = 0;
                error = Unicode.Utf8ToUcs(out var output_rune, c, ref read_length, write_length);
                Assert.AreEqual(ConversionError.None, error);
                Assert.AreEqual(write_length, read_length);
                Assert.AreEqual(output_rune.value, input_ucs);
            }
        }

        [Test]
        public unsafe void Utf16EncodeDecode([Range(0, 0xD7FF, 997)] int input_ucs)
        {
            var converted = new char[2];
            fixed(char* c = converted)
            {
                ConversionError error;
                int write_length = 0;
                error = Unicode.UcsToUtf16(c, ref write_length, converted.Length, new Unicode.Rune {value = input_ucs});
                Assert.AreEqual(ConversionError.None, error);
                int read_length = 0;
                error = Unicode.Utf16ToUcs(out var output_rune, c, ref read_length, write_length);
                Assert.AreEqual(ConversionError.None, error);
                Assert.AreEqual(write_length, read_length);
                Assert.AreEqual(output_rune.value, input_ucs);
            }
        }

        unsafe void Utf16ToUtf8(string source)
        {
            var converted = new byte[source.Length * 4]; // UTF-8 text can be up to 2x as long as UTF-16 text
            var destination = new char[source.Length];
            fixed(byte* c = converted)
            fixed(char* s = source)
            fixed(char* d = destination)
            {
                Unicode.Utf16ToUtf8(s, source.Length, c, out var converted_length, converted.Length);
                Unicode.Utf8ToUtf16(c, converted_length, d, out var destination_length, destination.Length);
                Assert.AreEqual(source, destination);
            }
        }

        [TestCase("The Quick Brown Fox Jumps Over The Lazy Dog")]
        [TestCase("Albert osti fagotin ja töräytti puhkuvan melodian.", TestName = "{m}(Finnish)")]
        [TestCase("Franz jagt im komplett verwahrlosten Taxi quer durch Bayern.", TestName = "{m}(German)")]
        [TestCase("איך בלש תפס גמד רוצח עז קטנה?", TestName = "{m}(Hebrew)")]
        [TestCase("PORTEZ CE VIEUX WHISKY AU JUGE BLOND QUI FUME.", TestName = "{m}(French)")]
        [TestCase("いろはにほへとちりぬるをわかよたれそつねならむうゐのおくやまけふこえてあさきゆめみしゑひもせす", TestName = "{m}(Japanese)")]
        [TestCase("키스의 고유조건은 입술끼리 만나야 하고 특별한 기술은 필요치 않다.", TestName = "{m}(Korean)")]
        public unsafe void Utf16ToUtf8BMP(string source)
        {
            Utf16ToUtf8(source);
        }

        [TestCase("🌕🌖🌗🌘🌑🌒🌓🌔", TestName = "{m}(MoonPhases)")]
        [TestCase("𝒞𝒯𝒮𝒟𝒳𝒩𝒫𝒢", TestName = "{m}(Cursive)")]
        public unsafe void Utf16ToUtf8TransBMP(string source)
        {
            Utf16ToUtf8(source);
        }

        [TestCase(30, CopyError.None)]
        [TestCase(31, CopyError.Truncation)]
        public void NativeString32AtMaximumSizeWorks(int size, CopyError expectedError)
        {
            var a = new String('o', size);
            NativeString32 aa = new NativeString32();
            var error = aa.CopyFrom(a);
            Assert.AreEqual(expectedError, error);
        }

        [TestCase("red", 0, 0, ParseError.Syntax)]
        [TestCase("0", 1, 0, ParseError.None)]
        [TestCase("-1", 2, -1, ParseError.None)]
        [TestCase("-0", 2, 0, ParseError.None)]
        [TestCase("100", 3, 100, ParseError.None)]
        [TestCase("-100", 4, -100, ParseError.None)]
        [TestCase("100.50", 3, 100, ParseError.None)]
        [TestCase("-100ab", 4, -100, ParseError.None)]
        [TestCase("2147483647", 10, 2147483647, ParseError.None)]
        [TestCase("-2147483648", 11, -2147483648, ParseError.None)]
        [TestCase("2147483648", 10, 0, ParseError.Overflow)]
        [TestCase("-2147483649", 11, 0, ParseError.Overflow)]
        public void NativeString32ParseIntWorks(String a, int expectedOffset, int expectedOutput, ParseError expectedResult)
        {
            NativeString32 aa = new NativeString32(a);
            int offset = 0;
            int output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase("red", 0, ParseError.Syntax)]
        [TestCase("0", 1,  ParseError.None)]
        [TestCase("-1", 2, ParseError.None)]
        [TestCase("-0", 2, ParseError.None)]
        [TestCase("100", 3, ParseError.None)]
        [TestCase("-100", 4, ParseError.None)]
        [TestCase("100.50", 6, ParseError.None)]
        [TestCase("2147483648", 10, ParseError.None)]
        [TestCase("-2147483649", 11, ParseError.None)]
        [TestCase("-10E10", 6, ParseError.None)]
        [TestCase("-10E-10", 7, ParseError.None)]
        [TestCase("-10E+10", 7, ParseError.None)]
        [TestCase("10E-40", 5, ParseError.Underflow)]
        [TestCase("10E+40", 5, ParseError.Overflow)]
        [TestCase("-Infinity", 9, ParseError.None)]
        [TestCase("Infinity", 8, ParseError.None)]
        [TestCase("1000001",       7, ParseError.None)]
        [TestCase("10000001",      8, ParseError.None)]
        [TestCase("100000001",     9, ParseError.None)]
        [TestCase("1000000001",   10, ParseError.None)]
        [TestCase("10000000001",  11, ParseError.None)]
        [TestCase("100000000001", 12, ParseError.None)]
        public void NativeString32ParseFloat(String unlocalizedString, int expectedOffset, ParseError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var localizedString = unlocalizedString.Replace('.', localizedDecimalSeparator);
            float expectedOutput = 0;
            try { expectedOutput = Single.Parse(localizedString); } catch {}
            NativeString32 nativeLocalizedString = new NativeString32(localizedString);
            int offset = 0;
            float output = 0;
            var result = nativeLocalizedString.Parse(ref offset, ref output, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void NativeString32FormatInt(int input)
        {
            var expectedOutput = input.ToString();
            NativeString32 aa = new NativeString32();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void NativeString32FormatLong(long input)
        {
            var expectedOutput = input.ToString();
            NativeString32 aa = new NativeString32();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void NativeString32FormatFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = input.ToString();
            NativeString32 aa = new NativeString32();
            var result = aa.Format(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void NativeString32AppendInt(int input)
        {
            var expectedOutput = "foo" + input.ToString();
            NativeString32 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void NativeString32AppendLong(long input)
        {
            var expectedOutput = "foo" + input.ToString();
            NativeString32 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void NativeString32AppendFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = "foo" + input.ToString();
            NativeString32 aa = "foo";
            var result = aa.Append(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void NativeString32FormatNegativeZero()
        {
            float input = -0.0f;
            var expectedOutput = input.ToString();
            NativeString32 aa = new NativeString32();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase("en-US")]
        [TestCase("da-DK")]
        public void NativeString32ParseFloatLocale(String locale)
        {
            var original = CultureInfo.CurrentCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = new CultureInfo(locale);
                var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
                float value = 1.5f;
                NativeString32 native = new NativeString32();
                native.Format(value, localizedDecimalSeparator);
                var nativeResult = native.ToString();
                var managedResult = value.ToString();
                Assert.AreEqual(managedResult, nativeResult);
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = original;
            }
        }

        [Test]
        public void NativeString32ParseFloatNan()
        {
            NativeString32 aa = new NativeString32("NaN");
            int offset = 0;
            float output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(ParseError.None, result);
            Assert.IsTrue(Single.IsNaN(output));
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString32ToStringWorks(String a)
        {
            NativeString32 aa = new NativeString32(a);
            Assert.AreEqual(aa.ToString(), a);
        }

        [TestCase("monkey", "monkey")]
        [TestCase("yellow", "green")]
        [TestCase("violet", "紅色", TestName = "{m}(Violet-Chinese-Red")]
        [TestCase("绿色", "蓝色", TestName = "{m}(Chinese-Green-Blue")]
        [TestCase("靛蓝色", "紫罗兰色", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "村上春樹", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("三島 由紀夫", "吉本ばなな", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void NativeString32EqualsWorks(String a, String b)
        {
            NativeString32 aa = new NativeString32(a);
            NativeString32 bb = new NativeString32(b);
            Assert.AreEqual(aa.Equals(bb), a.Equals(b));
        }

        [TestCase("monkey", "monkey")]
        [TestCase("red", "orange")]
        [TestCase("violet", "紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("橙色", "黄色", TestName = "{m}(Chinese-Orange-Yellow")]
        [TestCase("靛蓝色", "紫罗兰色", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "村上春樹", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("三島 由紀夫", "吉本ばなな", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void NativeString32CompareToWorks(String a, String b)
        {
            NativeString32 aa = new NativeString32(a);
            NativeString32 bb = new NativeString32(b);
            var c0 = aa.CompareTo(bb);
            var c1 = a.CompareTo(b);
            Assert.AreEqual(c0, c1);
        }

        [Test]
        public void NativeString32SizeOf()
        {
            Assert.AreEqual(UnsafeUtility.SizeOf<NativeString32>(), 32);
        }

        [TestCase("red", new byte[] {3, 0, 114, 101, 100}, TestName = "red")]
        [TestCase("紅色", new byte[] {6, 0, 231, 180, 133, 232, 137, 178}, TestName = "{m}(Chinese-Red)")]
        [TestCase("црвена", new byte[] {12, 0, 209, 134, 209, 128, 208, 178, 208, 181, 208, 189, 208, 176}, TestName = "{m}(Serbian-Red)")]
        [TestCase("George Washington", new byte[] {17, 0, 71, 101, 111, 114, 103, 101, 32, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110}, TestName = "George Washington")]
        [TestCase("村上春樹", new byte[] {12, 0, 230, 157, 145, 228, 184, 138, 230, 152, 165, 230, 168, 185}, TestName = "{m}(HarukiMurakami)")]
        unsafe public void NativeString32Layout(String a, byte[] expected)
        {
            fixed(byte* expectedBytes = expected)
            {
                NativeString32 actual = a;
                byte* actualBytes = (byte*)&actual;
                Assert.AreEqual(0, UnsafeUtility.MemCmp(expectedBytes, actualBytes, expected.Length));
            }
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString32ToNativeString64Works(String a)
        {
            var b = new NativeString32(a);
            var c = new NativeString64(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString32ToNativeString128Works(String a)
        {
            var b = new NativeString32(a);
            var c = new NativeString128(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString32ToNativeString512Works(String a)
        {
            var b = new NativeString32(a);
            var c = new NativeString512(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString32ToNativeString4096Works(String a)
        {
            var b = new NativeString32(a);
            var c = new NativeString4096(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase(62, CopyError.None)]
        [TestCase(63, CopyError.Truncation)]
        public void NativeString64AtMaximumSizeWorks(int size, CopyError expectedError)
        {
            var a = new String('o', size);
            NativeString64 aa = new NativeString64();
            var error = aa.CopyFrom(a);
            Assert.AreEqual(expectedError, error);
        }

        [TestCase("red", 0, 0, ParseError.Syntax)]
        [TestCase("0", 1, 0, ParseError.None)]
        [TestCase("-1", 2, -1, ParseError.None)]
        [TestCase("-0", 2, 0, ParseError.None)]
        [TestCase("100", 3, 100, ParseError.None)]
        [TestCase("-100", 4, -100, ParseError.None)]
        [TestCase("100.50", 3, 100, ParseError.None)]
        [TestCase("-100ab", 4, -100, ParseError.None)]
        [TestCase("2147483647", 10, 2147483647, ParseError.None)]
        [TestCase("-2147483648", 11, -2147483648, ParseError.None)]
        [TestCase("2147483648", 10, 0, ParseError.Overflow)]
        [TestCase("-2147483649", 11, 0, ParseError.Overflow)]
        public void NativeString64ParseIntWorks(String a, int expectedOffset, int expectedOutput, ParseError expectedResult)
        {
            NativeString64 aa = new NativeString64(a);
            int offset = 0;
            int output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase("red", 0, ParseError.Syntax)]
        [TestCase("0", 1,  ParseError.None)]
        [TestCase("-1", 2, ParseError.None)]
        [TestCase("-0", 2, ParseError.None)]
        [TestCase("100", 3, ParseError.None)]
        [TestCase("-100", 4, ParseError.None)]
        [TestCase("100.50", 6, ParseError.None)]
        [TestCase("2147483648", 10, ParseError.None)]
        [TestCase("-2147483649", 11, ParseError.None)]
        [TestCase("-10E10", 6, ParseError.None)]
        [TestCase("-10E-10", 7, ParseError.None)]
        [TestCase("-10E+10", 7, ParseError.None)]
        [TestCase("10E-40", 5, ParseError.Underflow)]
        [TestCase("10E+40", 5, ParseError.Overflow)]
        [TestCase("-Infinity", 9, ParseError.None)]
        [TestCase("Infinity", 8, ParseError.None)]
        [TestCase("1000001",       7, ParseError.None)]
        [TestCase("10000001",      8, ParseError.None)]
        [TestCase("100000001",     9, ParseError.None)]
        [TestCase("1000000001",   10, ParseError.None)]
        [TestCase("10000000001",  11, ParseError.None)]
        [TestCase("100000000001", 12, ParseError.None)]
        public void NativeString64ParseFloat(String unlocalizedString, int expectedOffset, ParseError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var localizedString = unlocalizedString.Replace('.', localizedDecimalSeparator);
            float expectedOutput = 0;
            try { expectedOutput = Single.Parse(localizedString); } catch {}
            NativeString64 nativeLocalizedString = new NativeString64(localizedString);
            int offset = 0;
            float output = 0;
            var result = nativeLocalizedString.Parse(ref offset, ref output, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void NativeString64FormatInt(int input)
        {
            var expectedOutput = input.ToString();
            NativeString64 aa = new NativeString64();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void NativeString64FormatLong(long input)
        {
            var expectedOutput = input.ToString();
            NativeString64 aa = new NativeString64();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void NativeString64FormatFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = input.ToString();
            NativeString64 aa = new NativeString64();
            var result = aa.Format(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void NativeString64AppendInt(int input)
        {
            var expectedOutput = "foo" + input.ToString();
            NativeString64 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void NativeString64AppendLong(long input)
        {
            var expectedOutput = "foo" + input.ToString();
            NativeString64 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void NativeString64AppendFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = "foo" + input.ToString();
            NativeString64 aa = "foo";
            var result = aa.Append(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void NativeString64FormatNegativeZero()
        {
            float input = -0.0f;
            var expectedOutput = input.ToString();
            NativeString64 aa = new NativeString64();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase("en-US")]
        [TestCase("da-DK")]
        public void NativeString64ParseFloatLocale(String locale)
        {
            var original = CultureInfo.CurrentCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = new CultureInfo(locale);
                var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
                float value = 1.5f;
                NativeString64 native = new NativeString64();
                native.Format(value, localizedDecimalSeparator);
                var nativeResult = native.ToString();
                var managedResult = value.ToString();
                Assert.AreEqual(managedResult, nativeResult);
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = original;
            }
        }

        [Test]
        public void NativeString64ParseFloatNan()
        {
            NativeString64 aa = new NativeString64("NaN");
            int offset = 0;
            float output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(ParseError.None, result);
            Assert.IsTrue(Single.IsNaN(output));
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString64ToStringWorks(String a)
        {
            NativeString64 aa = new NativeString64(a);
            Assert.AreEqual(aa.ToString(), a);
        }

        [TestCase("monkey", "monkey")]
        [TestCase("yellow", "green")]
        [TestCase("violet", "紅色", TestName = "{m}(Violet-Chinese-Red")]
        [TestCase("绿色", "蓝色", TestName = "{m}(Chinese-Green-Blue")]
        [TestCase("靛蓝色", "紫罗兰色", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "村上春樹", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("三島 由紀夫", "吉本ばなな", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void NativeString64EqualsWorks(String a, String b)
        {
            NativeString64 aa = new NativeString64(a);
            NativeString64 bb = new NativeString64(b);
            Assert.AreEqual(aa.Equals(bb), a.Equals(b));
        }

        [TestCase("monkey", "monkey")]
        [TestCase("red", "orange")]
        [TestCase("violet", "紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("橙色", "黄色", TestName = "{m}(Chinese-Orange-Yellow")]
        [TestCase("靛蓝色", "紫罗兰色", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "村上春樹", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("三島 由紀夫", "吉本ばなな", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void NativeString64CompareToWorks(String a, String b)
        {
            NativeString64 aa = new NativeString64(a);
            NativeString64 bb = new NativeString64(b);
            var c0 = aa.CompareTo(bb);
            var c1 = a.CompareTo(b);
            Assert.AreEqual(c0, c1);
        }

        [Test]
        public void NativeString64SizeOf()
        {
            Assert.AreEqual(UnsafeUtility.SizeOf<NativeString64>(), 64);
        }

        [TestCase("red", new byte[] {3, 0, 114, 101, 100}, TestName = "red")]
        [TestCase("紅色", new byte[] {6, 0, 231, 180, 133, 232, 137, 178}, TestName = "{m}(Chinese-Red)")]
        [TestCase("црвена", new byte[] {12, 0, 209, 134, 209, 128, 208, 178, 208, 181, 208, 189, 208, 176}, TestName = "{m}(Serbian-Red)")]
        [TestCase("George Washington", new byte[] {17, 0, 71, 101, 111, 114, 103, 101, 32, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110}, TestName = "George Washington")]
        [TestCase("村上春樹", new byte[] {12, 0, 230, 157, 145, 228, 184, 138, 230, 152, 165, 230, 168, 185}, TestName = "{m}(HarukiMurakami)")]
        [TestCase("🌕🌖🌗🌘🌑🌒🌓🌔", new byte[] {32, 0, 240, 159, 140, 149, 240, 159, 140, 150, 240, 159, 140, 151, 240, 159, 140, 152, 240, 159, 140, 145, 240, 159, 140, 146, 240, 159, 140, 147, 240, 159, 140, 148}, TestName = "{m}(MoonPhases)")]
        [TestCase("𝒞𝒯𝒮𝒟𝒳𝒩𝒫𝒢", new byte[] {32, 0, 240, 157, 146, 158, 240, 157, 146, 175, 240, 157, 146, 174, 240, 157, 146, 159, 240, 157, 146, 179, 240, 157, 146, 169, 240, 157, 146, 171, 240, 157, 146, 162}, TestName = "{m}(Cursive)")]
        [TestCase("로마는 하루아침에 이루어진 것이 아니다", new byte[] {55, 0, 235, 161, 156, 235, 167, 136, 235, 138, 148, 32, 237, 149, 152, 235, 163, 168, 236, 149, 132, 236, 185, 168, 236, 151, 144, 32, 236, 157, 180, 235, 163, 168, 236, 150, 180, 236, 167, 132, 32, 234, 178, 131, 236, 157, 180, 32, 236, 149, 132, 235, 139, 136, 235, 139, 164}, TestName = "{m}(Korean - Rome was not made overnight)")]
        unsafe public void NativeString64Layout(String a, byte[] expected)
        {
            fixed(byte* expectedBytes = expected)
            {
                NativeString64 actual = a;
                byte* actualBytes = (byte*)&actual;
                Assert.AreEqual(0, UnsafeUtility.MemCmp(expectedBytes, actualBytes, expected.Length));
            }
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString64ToNativeString32Works(String a)
        {
            var b = new NativeString64(a);
            var c = new NativeString32(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString64ToNativeString128Works(String a)
        {
            var b = new NativeString64(a);
            var c = new NativeString128(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString64ToNativeString512Works(String a)
        {
            var b = new NativeString64(a);
            var c = new NativeString512(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString64ToNativeString4096Works(String a)
        {
            var b = new NativeString64(a);
            var c = new NativeString4096(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase(126, CopyError.None)]
        [TestCase(127, CopyError.Truncation)]
        public void NativeString128AtMaximumSizeWorks(int size, CopyError expectedError)
        {
            var a = new String('o', size);
            NativeString128 aa = new NativeString128();
            var error = aa.CopyFrom(a);
            Assert.AreEqual(expectedError, error);
        }

        [TestCase("red", 0, 0, ParseError.Syntax)]
        [TestCase("0", 1, 0, ParseError.None)]
        [TestCase("-1", 2, -1, ParseError.None)]
        [TestCase("-0", 2, 0, ParseError.None)]
        [TestCase("100", 3, 100, ParseError.None)]
        [TestCase("-100", 4, -100, ParseError.None)]
        [TestCase("100.50", 3, 100, ParseError.None)]
        [TestCase("-100ab", 4, -100, ParseError.None)]
        [TestCase("2147483647", 10, 2147483647, ParseError.None)]
        [TestCase("-2147483648", 11, -2147483648, ParseError.None)]
        [TestCase("2147483648", 10, 0, ParseError.Overflow)]
        [TestCase("-2147483649", 11, 0, ParseError.Overflow)]
        public void NativeString128ParseIntWorks(String a, int expectedOffset, int expectedOutput, ParseError expectedResult)
        {
            NativeString128 aa = new NativeString128(a);
            int offset = 0;
            int output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase("red", 0, ParseError.Syntax)]
        [TestCase("0", 1,  ParseError.None)]
        [TestCase("-1", 2, ParseError.None)]
        [TestCase("-0", 2, ParseError.None)]
        [TestCase("100", 3, ParseError.None)]
        [TestCase("-100", 4, ParseError.None)]
        [TestCase("100.50", 6, ParseError.None)]
        [TestCase("2147483648", 10, ParseError.None)]
        [TestCase("-2147483649", 11, ParseError.None)]
        [TestCase("-10E10", 6, ParseError.None)]
        [TestCase("-10E-10", 7, ParseError.None)]
        [TestCase("-10E+10", 7, ParseError.None)]
        [TestCase("10E-40", 5, ParseError.Underflow)]
        [TestCase("10E+40", 5, ParseError.Overflow)]
        [TestCase("-Infinity", 9, ParseError.None)]
        [TestCase("Infinity", 8, ParseError.None)]
        [TestCase("1000001",       7, ParseError.None)]
        [TestCase("10000001",      8, ParseError.None)]
        [TestCase("100000001",     9, ParseError.None)]
        [TestCase("1000000001",   10, ParseError.None)]
        [TestCase("10000000001",  11, ParseError.None)]
        [TestCase("100000000001", 12, ParseError.None)]
        public void NativeString128ParseFloat(String unlocalizedString, int expectedOffset, ParseError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var localizedString = unlocalizedString.Replace('.', localizedDecimalSeparator);
            float expectedOutput = 0;
            try { expectedOutput = Single.Parse(localizedString); } catch {}
            NativeString128 nativeLocalizedString = new NativeString128(localizedString);
            int offset = 0;
            float output = 0;
            var result = nativeLocalizedString.Parse(ref offset, ref output, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void NativeString128FormatInt(int input)
        {
            var expectedOutput = input.ToString();
            NativeString128 aa = new NativeString128();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void NativeString128FormatLong(long input)
        {
            var expectedOutput = input.ToString();
            NativeString128 aa = new NativeString128();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void NativeString128FormatFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = input.ToString();
            NativeString128 aa = new NativeString128();
            var result = aa.Format(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void NativeString128AppendInt(int input)
        {
            var expectedOutput = "foo" + input.ToString();
            NativeString128 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void NativeString128AppendLong(long input)
        {
            var expectedOutput = "foo" + input.ToString();
            NativeString128 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void NativeString128AppendFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = "foo" + input.ToString();
            NativeString128 aa = "foo";
            var result = aa.Append(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void NativeString128FormatNegativeZero()
        {
            float input = -0.0f;
            var expectedOutput = input.ToString();
            NativeString128 aa = new NativeString128();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase("en-US")]
        [TestCase("da-DK")]
        public void NativeString128ParseFloatLocale(String locale)
        {
            var original = CultureInfo.CurrentCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = new CultureInfo(locale);
                var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
                float value = 1.5f;
                NativeString128 native = new NativeString128();
                native.Format(value, localizedDecimalSeparator);
                var nativeResult = native.ToString();
                var managedResult = value.ToString();
                Assert.AreEqual(managedResult, nativeResult);
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = original;
            }
        }

        [Test]
        public void NativeString128ParseFloatNan()
        {
            NativeString128 aa = new NativeString128("NaN");
            int offset = 0;
            float output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(ParseError.None, result);
            Assert.IsTrue(Single.IsNaN(output));
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString128ToStringWorks(String a)
        {
            NativeString128 aa = new NativeString128(a);
            Assert.AreEqual(aa.ToString(), a);
        }

        [TestCase("monkey", "monkey")]
        [TestCase("yellow", "green")]
        [TestCase("violet", "紅色", TestName = "{m}(Violet-Chinese-Red")]
        [TestCase("绿色", "蓝色", TestName = "{m}(Chinese-Green-Blue")]
        [TestCase("靛蓝色", "紫罗兰色", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "村上春樹", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("三島 由紀夫", "吉本ばなな", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void NativeString128EqualsWorks(String a, String b)
        {
            NativeString128 aa = new NativeString128(a);
            NativeString128 bb = new NativeString128(b);
            Assert.AreEqual(aa.Equals(bb), a.Equals(b));
        }

        [TestCase("monkey", "monkey")]
        [TestCase("red", "orange")]
        [TestCase("violet", "紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("橙色", "黄色", TestName = "{m}(Chinese-Orange-Yellow")]
        [TestCase("靛蓝色", "紫罗兰色", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "村上春樹", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("三島 由紀夫", "吉本ばなな", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void NativeString128CompareToWorks(String a, String b)
        {
            NativeString128 aa = new NativeString128(a);
            NativeString128 bb = new NativeString128(b);
            var c0 = aa.CompareTo(bb);
            var c1 = a.CompareTo(b);
            Assert.AreEqual(c0, c1);
        }

        [Test]
        public void NativeString128SizeOf()
        {
            Assert.AreEqual(UnsafeUtility.SizeOf<NativeString128>(), 128);
        }

        [TestCase("red", new byte[] {3, 0, 114, 101, 100}, TestName = "red")]
        [TestCase("紅色", new byte[] {6, 0, 231, 180, 133, 232, 137, 178}, TestName = "{m}(Chinese-Red)")]
        [TestCase("црвена", new byte[] {12, 0, 209, 134, 209, 128, 208, 178, 208, 181, 208, 189, 208, 176}, TestName = "{m}(Serbian-Red)")]
        [TestCase("George Washington", new byte[] {17, 0, 71, 101, 111, 114, 103, 101, 32, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110}, TestName = "George Washington")]
        [TestCase("村上春樹", new byte[] {12, 0, 230, 157, 145, 228, 184, 138, 230, 152, 165, 230, 168, 185}, TestName = "{m}(HarukiMurakami)")]
        [TestCase("🌕🌖🌗🌘🌑🌒🌓🌔", new byte[] {32, 0, 240, 159, 140, 149, 240, 159, 140, 150, 240, 159, 140, 151, 240, 159, 140, 152, 240, 159, 140, 145, 240, 159, 140, 146, 240, 159, 140, 147, 240, 159, 140, 148}, TestName = "{m}(MoonPhases)")]
        [TestCase("𝒞𝒯𝒮𝒟𝒳𝒩𝒫𝒢", new byte[] {32, 0, 240, 157, 146, 158, 240, 157, 146, 175, 240, 157, 146, 174, 240, 157, 146, 159, 240, 157, 146, 179, 240, 157, 146, 169, 240, 157, 146, 171, 240, 157, 146, 162}, TestName = "{m}(Cursive)")]
        [TestCase("로마는 하루아침에 이루어진 것이 아니다", new byte[] {55, 0, 235, 161, 156, 235, 167, 136, 235, 138, 148, 32, 237, 149, 152, 235, 163, 168, 236, 149, 132, 236, 185, 168, 236, 151, 144, 32, 236, 157, 180, 235, 163, 168, 236, 150, 180, 236, 167, 132, 32, 234, 178, 131, 236, 157, 180, 32, 236, 149, 132, 235, 139, 136, 235, 139, 164}, TestName = "{m}(Korean - Rome was not made overnight)")]
        [TestCase("Лако ти је плитку воду замутити и будалу наљутити", new byte[] {90, 0, 208, 155, 208, 176, 208, 186, 208, 190, 32, 209, 130, 208, 184, 32, 209, 152, 208, 181, 32, 208, 191, 208, 187, 208, 184, 209, 130, 208, 186, 209, 131, 32, 208, 178, 208, 190, 208, 180, 209, 131, 32, 208, 183, 208, 176, 208, 188, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184, 32, 208, 184, 32, 208, 177, 209, 131, 208, 180, 208, 176, 208, 187, 209, 131, 32, 208, 189, 208, 176, 209, 153, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184}, TestName = "{m}(Serbian-Proverb)")]
        [TestCase("Үнэн үг хэлсэн хүнд ноёд өстэй, үхэр унасан хүнд ноход өстэй.", new byte[] {110, 0, 210, 174, 208, 189, 209, 141, 208, 189, 32, 210, 175, 208, 179, 32, 209, 133, 209, 141, 208, 187, 209, 129, 209, 141, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 145, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 44, 32, 210, 175, 209, 133, 209, 141, 209, 128, 32, 209, 131, 208, 189, 208, 176, 209, 129, 208, 176, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 133, 208, 190, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 46}, TestName = "{m}(Mongolian-Proverb1)")]
        unsafe public void NativeString128Layout(String a, byte[] expected)
        {
            fixed(byte* expectedBytes = expected)
            {
                NativeString128 actual = a;
                byte* actualBytes = (byte*)&actual;
                Assert.AreEqual(0, UnsafeUtility.MemCmp(expectedBytes, actualBytes, expected.Length));
            }
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString128ToNativeString32Works(String a)
        {
            var b = new NativeString128(a);
            var c = new NativeString32(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString128ToNativeString64Works(String a)
        {
            var b = new NativeString128(a);
            var c = new NativeString64(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString128ToNativeString512Works(String a)
        {
            var b = new NativeString128(a);
            var c = new NativeString512(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString128ToNativeString4096Works(String a)
        {
            var b = new NativeString128(a);
            var c = new NativeString4096(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase(510, CopyError.None)]
        [TestCase(511, CopyError.Truncation)]
        public void NativeString512AtMaximumSizeWorks(int size, CopyError expectedError)
        {
            var a = new String('o', size);
            NativeString512 aa = new NativeString512();
            var error = aa.CopyFrom(a);
            Assert.AreEqual(expectedError, error);
        }

        [TestCase("red", 0, 0, ParseError.Syntax)]
        [TestCase("0", 1, 0, ParseError.None)]
        [TestCase("-1", 2, -1, ParseError.None)]
        [TestCase("-0", 2, 0, ParseError.None)]
        [TestCase("100", 3, 100, ParseError.None)]
        [TestCase("-100", 4, -100, ParseError.None)]
        [TestCase("100.50", 3, 100, ParseError.None)]
        [TestCase("-100ab", 4, -100, ParseError.None)]
        [TestCase("2147483647", 10, 2147483647, ParseError.None)]
        [TestCase("-2147483648", 11, -2147483648, ParseError.None)]
        [TestCase("2147483648", 10, 0, ParseError.Overflow)]
        [TestCase("-2147483649", 11, 0, ParseError.Overflow)]
        public void NativeString512ParseIntWorks(String a, int expectedOffset, int expectedOutput, ParseError expectedResult)
        {
            NativeString512 aa = new NativeString512(a);
            int offset = 0;
            int output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase("red", 0, ParseError.Syntax)]
        [TestCase("0", 1,  ParseError.None)]
        [TestCase("-1", 2, ParseError.None)]
        [TestCase("-0", 2, ParseError.None)]
        [TestCase("100", 3, ParseError.None)]
        [TestCase("-100", 4, ParseError.None)]
        [TestCase("100.50", 6, ParseError.None)]
        [TestCase("2147483648", 10, ParseError.None)]
        [TestCase("-2147483649", 11, ParseError.None)]
        [TestCase("-10E10", 6, ParseError.None)]
        [TestCase("-10E-10", 7, ParseError.None)]
        [TestCase("-10E+10", 7, ParseError.None)]
        [TestCase("10E-40", 5, ParseError.Underflow)]
        [TestCase("10E+40", 5, ParseError.Overflow)]
        [TestCase("-Infinity", 9, ParseError.None)]
        [TestCase("Infinity", 8, ParseError.None)]
        [TestCase("1000001",       7, ParseError.None)]
        [TestCase("10000001",      8, ParseError.None)]
        [TestCase("100000001",     9, ParseError.None)]
        [TestCase("1000000001",   10, ParseError.None)]
        [TestCase("10000000001",  11, ParseError.None)]
        [TestCase("100000000001", 12, ParseError.None)]
        public void NativeString512ParseFloat(String unlocalizedString, int expectedOffset, ParseError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var localizedString = unlocalizedString.Replace('.', localizedDecimalSeparator);
            float expectedOutput = 0;
            try { expectedOutput = Single.Parse(localizedString); } catch {}
            NativeString512 nativeLocalizedString = new NativeString512(localizedString);
            int offset = 0;
            float output = 0;
            var result = nativeLocalizedString.Parse(ref offset, ref output, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void NativeString512FormatInt(int input)
        {
            var expectedOutput = input.ToString();
            NativeString512 aa = new NativeString512();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void NativeString512FormatLong(long input)
        {
            var expectedOutput = input.ToString();
            NativeString512 aa = new NativeString512();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void NativeString512FormatFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = input.ToString();
            NativeString512 aa = new NativeString512();
            var result = aa.Format(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void NativeString512AppendInt(int input)
        {
            var expectedOutput = "foo" + input.ToString();
            NativeString512 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void NativeString512AppendLong(long input)
        {
            var expectedOutput = "foo" + input.ToString();
            NativeString512 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void NativeString512AppendFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = "foo" + input.ToString();
            NativeString512 aa = "foo";
            var result = aa.Append(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void NativeString512FormatNegativeZero()
        {
            float input = -0.0f;
            var expectedOutput = input.ToString();
            NativeString512 aa = new NativeString512();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase("en-US")]
        [TestCase("da-DK")]
        public void NativeString512ParseFloatLocale(String locale)
        {
            var original = CultureInfo.CurrentCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = new CultureInfo(locale);
                var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
                float value = 1.5f;
                NativeString512 native = new NativeString512();
                native.Format(value, localizedDecimalSeparator);
                var nativeResult = native.ToString();
                var managedResult = value.ToString();
                Assert.AreEqual(managedResult, nativeResult);
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = original;
            }
        }

        [Test]
        public void NativeString512ParseFloatNan()
        {
            NativeString512 aa = new NativeString512("NaN");
            int offset = 0;
            float output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(ParseError.None, result);
            Assert.IsTrue(Single.IsNaN(output));
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString512ToStringWorks(String a)
        {
            NativeString512 aa = new NativeString512(a);
            Assert.AreEqual(aa.ToString(), a);
        }

        [TestCase("monkey", "monkey")]
        [TestCase("yellow", "green")]
        [TestCase("violet", "紅色", TestName = "{m}(Violet-Chinese-Red")]
        [TestCase("绿色", "蓝色", TestName = "{m}(Chinese-Green-Blue")]
        [TestCase("靛蓝色", "紫罗兰色", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "村上春樹", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("三島 由紀夫", "吉本ばなな", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void NativeString512EqualsWorks(String a, String b)
        {
            NativeString512 aa = new NativeString512(a);
            NativeString512 bb = new NativeString512(b);
            Assert.AreEqual(aa.Equals(bb), a.Equals(b));
        }

        [TestCase("monkey", "monkey")]
        [TestCase("red", "orange")]
        [TestCase("violet", "紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("橙色", "黄色", TestName = "{m}(Chinese-Orange-Yellow")]
        [TestCase("靛蓝色", "紫罗兰色", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "村上春樹", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("三島 由紀夫", "吉本ばなな", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void NativeString512CompareToWorks(String a, String b)
        {
            NativeString512 aa = new NativeString512(a);
            NativeString512 bb = new NativeString512(b);
            var c0 = aa.CompareTo(bb);
            var c1 = a.CompareTo(b);
            Assert.AreEqual(c0, c1);
        }

        [Test]
        public void NativeString512SizeOf()
        {
            Assert.AreEqual(UnsafeUtility.SizeOf<NativeString512>(), 512);
        }

        [TestCase("red", new byte[] {3, 0, 114, 101, 100}, TestName = "red")]
        [TestCase("紅色", new byte[] {6, 0, 231, 180, 133, 232, 137, 178}, TestName = "{m}(Chinese-Red)")]
        [TestCase("црвена", new byte[] {12, 0, 209, 134, 209, 128, 208, 178, 208, 181, 208, 189, 208, 176}, TestName = "{m}(Serbian-Red)")]
        [TestCase("George Washington", new byte[] {17, 0, 71, 101, 111, 114, 103, 101, 32, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110}, TestName = "George Washington")]
        [TestCase("村上春樹", new byte[] {12, 0, 230, 157, 145, 228, 184, 138, 230, 152, 165, 230, 168, 185}, TestName = "{m}(HarukiMurakami)")]
        [TestCase("🌕🌖🌗🌘🌑🌒🌓🌔", new byte[] {32, 0, 240, 159, 140, 149, 240, 159, 140, 150, 240, 159, 140, 151, 240, 159, 140, 152, 240, 159, 140, 145, 240, 159, 140, 146, 240, 159, 140, 147, 240, 159, 140, 148}, TestName = "{m}(MoonPhases)")]
        [TestCase("𝒞𝒯𝒮𝒟𝒳𝒩𝒫𝒢", new byte[] {32, 0, 240, 157, 146, 158, 240, 157, 146, 175, 240, 157, 146, 174, 240, 157, 146, 159, 240, 157, 146, 179, 240, 157, 146, 169, 240, 157, 146, 171, 240, 157, 146, 162}, TestName = "{m}(Cursive)")]
        [TestCase("로마는 하루아침에 이루어진 것이 아니다", new byte[] {55, 0, 235, 161, 156, 235, 167, 136, 235, 138, 148, 32, 237, 149, 152, 235, 163, 168, 236, 149, 132, 236, 185, 168, 236, 151, 144, 32, 236, 157, 180, 235, 163, 168, 236, 150, 180, 236, 167, 132, 32, 234, 178, 131, 236, 157, 180, 32, 236, 149, 132, 235, 139, 136, 235, 139, 164}, TestName = "{m}(Korean - Rome was not made overnight)")]
        [TestCase("Лако ти је плитку воду замутити и будалу наљутити", new byte[] {90, 0, 208, 155, 208, 176, 208, 186, 208, 190, 32, 209, 130, 208, 184, 32, 209, 152, 208, 181, 32, 208, 191, 208, 187, 208, 184, 209, 130, 208, 186, 209, 131, 32, 208, 178, 208, 190, 208, 180, 209, 131, 32, 208, 183, 208, 176, 208, 188, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184, 32, 208, 184, 32, 208, 177, 209, 131, 208, 180, 208, 176, 208, 187, 209, 131, 32, 208, 189, 208, 176, 209, 153, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184}, TestName = "{m}(Serbian-Proverb)")]
        [TestCase("Үнэн үг хэлсэн хүнд ноёд өстэй, үхэр унасан хүнд ноход өстэй.", new byte[] {110, 0, 210, 174, 208, 189, 209, 141, 208, 189, 32, 210, 175, 208, 179, 32, 209, 133, 209, 141, 208, 187, 209, 129, 209, 141, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 145, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 44, 32, 210, 175, 209, 133, 209, 141, 209, 128, 32, 209, 131, 208, 189, 208, 176, 209, 129, 208, 176, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 133, 208, 190, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 46}, TestName = "{m}(Mongolian-Proverb1)")]
        [TestCase("न अभिशेको न संस्कारः सिम्हस्य कृयते वनेविक्रमार्जितसत्वस्य स्वयमेव मृगेन्द्रता", new byte[] {218, 0, 224, 164, 168, 32, 224, 164, 133, 224, 164, 173, 224, 164, 191, 224, 164, 182, 224, 165, 135, 224, 164, 149, 224, 165, 139, 32, 224, 164, 168, 32, 224, 164, 184, 224, 164, 130, 224, 164, 184, 224, 165, 141, 224, 164, 149, 224, 164, 190, 224, 164, 176, 224, 164, 131, 32, 224, 164, 184, 224, 164, 191, 224, 164, 174, 224, 165, 141, 224, 164, 185, 224, 164, 184, 224, 165, 141, 224, 164, 175, 32, 224, 164, 149, 224, 165, 131, 224, 164, 175, 224, 164, 164, 224, 165, 135, 32, 224, 164, 181, 224, 164, 168, 224, 165, 135, 224, 164, 181, 224, 164, 191, 224, 164, 149, 224, 165, 141, 224, 164, 176, 224, 164, 174, 224, 164, 190, 224, 164, 176, 224, 165, 141, 224, 164, 156, 224, 164, 191, 224, 164, 164, 224, 164, 184, 224, 164, 164, 224, 165, 141, 224, 164, 181, 224, 164, 184, 224, 165, 141, 224, 164, 175, 32, 224, 164, 184, 224, 165, 141, 224, 164, 181, 224, 164, 175, 224, 164, 174, 224, 165, 135, 224, 164, 181, 32, 224, 164, 174, 224, 165, 131, 224, 164, 151, 224, 165, 135, 224, 164, 168, 224, 165, 141, 224, 164, 166, 224, 165, 141, 224, 164, 176, 224, 164, 164, 224, 164, 190}, TestName = "{m}(Hindi-Proverb3)")]
        unsafe public void NativeString512Layout(String a, byte[] expected)
        {
            fixed(byte* expectedBytes = expected)
            {
                NativeString512 actual = a;
                byte* actualBytes = (byte*)&actual;
                Assert.AreEqual(0, UnsafeUtility.MemCmp(expectedBytes, actualBytes, expected.Length));
            }
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString512ToNativeString32Works(String a)
        {
            var b = new NativeString512(a);
            var c = new NativeString32(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString512ToNativeString64Works(String a)
        {
            var b = new NativeString512(a);
            var c = new NativeString64(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString512ToNativeString128Works(String a)
        {
            var b = new NativeString512(a);
            var c = new NativeString128(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString512ToNativeString4096Works(String a)
        {
            var b = new NativeString512(a);
            var c = new NativeString4096(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase(4094, CopyError.None)]
        [TestCase(4095, CopyError.Truncation)]
        public void NativeString4096AtMaximumSizeWorks(int size, CopyError expectedError)
        {
            var a = new String('o', size);
            NativeString4096 aa = new NativeString4096();
            var error = aa.CopyFrom(a);
            Assert.AreEqual(expectedError, error);
        }

        [TestCase("red", 0, 0, ParseError.Syntax)]
        [TestCase("0", 1, 0, ParseError.None)]
        [TestCase("-1", 2, -1, ParseError.None)]
        [TestCase("-0", 2, 0, ParseError.None)]
        [TestCase("100", 3, 100, ParseError.None)]
        [TestCase("-100", 4, -100, ParseError.None)]
        [TestCase("100.50", 3, 100, ParseError.None)]
        [TestCase("-100ab", 4, -100, ParseError.None)]
        [TestCase("2147483647", 10, 2147483647, ParseError.None)]
        [TestCase("-2147483648", 11, -2147483648, ParseError.None)]
        [TestCase("2147483648", 10, 0, ParseError.Overflow)]
        [TestCase("-2147483649", 11, 0, ParseError.Overflow)]
        public void NativeString4096ParseIntWorks(String a, int expectedOffset, int expectedOutput, ParseError expectedResult)
        {
            NativeString4096 aa = new NativeString4096(a);
            int offset = 0;
            int output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase("red", 0, ParseError.Syntax)]
        [TestCase("0", 1,  ParseError.None)]
        [TestCase("-1", 2, ParseError.None)]
        [TestCase("-0", 2, ParseError.None)]
        [TestCase("100", 3, ParseError.None)]
        [TestCase("-100", 4, ParseError.None)]
        [TestCase("100.50", 6, ParseError.None)]
        [TestCase("2147483648", 10, ParseError.None)]
        [TestCase("-2147483649", 11, ParseError.None)]
        [TestCase("-10E10", 6, ParseError.None)]
        [TestCase("-10E-10", 7, ParseError.None)]
        [TestCase("-10E+10", 7, ParseError.None)]
        [TestCase("10E-40", 5, ParseError.Underflow)]
        [TestCase("10E+40", 5, ParseError.Overflow)]
        [TestCase("-Infinity", 9, ParseError.None)]
        [TestCase("Infinity", 8, ParseError.None)]
        [TestCase("1000001",       7, ParseError.None)]
        [TestCase("10000001",      8, ParseError.None)]
        [TestCase("100000001",     9, ParseError.None)]
        [TestCase("1000000001",   10, ParseError.None)]
        [TestCase("10000000001",  11, ParseError.None)]
        [TestCase("100000000001", 12, ParseError.None)]
        public void NativeString4096ParseFloat(String unlocalizedString, int expectedOffset, ParseError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var localizedString = unlocalizedString.Replace('.', localizedDecimalSeparator);
            float expectedOutput = 0;
            try { expectedOutput = Single.Parse(localizedString); } catch {}
            NativeString4096 nativeLocalizedString = new NativeString4096(localizedString);
            int offset = 0;
            float output = 0;
            var result = nativeLocalizedString.Parse(ref offset, ref output, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            Assert.AreEqual(expectedOffset, offset);
            if (result == ParseError.None)
            {
                Assert.AreEqual(expectedOutput, output);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void NativeString4096FormatInt(int input)
        {
            var expectedOutput = input.ToString();
            NativeString4096 aa = new NativeString4096();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void NativeString4096FormatLong(long input)
        {
            var expectedOutput = input.ToString();
            NativeString4096 aa = new NativeString4096();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void NativeString4096FormatFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = input.ToString();
            NativeString4096 aa = new NativeString4096();
            var result = aa.Format(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [TestCase(-2147483648)]
        [TestCase(-100)]
        [TestCase(-1)]
        [TestCase(0)]
        [TestCase(1)]
        [TestCase(100)]
        [TestCase(2147483647)]
        public void NativeString4096AppendInt(int input)
        {
            var expectedOutput = "foo" + input.ToString();
            NativeString4096 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(-9223372036854775808L)]
        [TestCase(-100L)]
        [TestCase(-1L)]
        [TestCase(0L)]
        [TestCase(1L)]
        [TestCase(100L)]
        [TestCase(9223372036854775807L)]
        public void NativeString4096AppendLong(long input)
        {
            var expectedOutput = "foo" + input.ToString();
            NativeString4096 aa = "foo";
            var result = aa.Append(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase(Single.NaN, FormatError.None)]
        [TestCase(Single.PositiveInfinity, FormatError.None)]
        [TestCase(Single.NegativeInfinity, FormatError.None)]
        [TestCase(0.0f, FormatError.None)]
        [TestCase(-1.0f, FormatError.None)]
        [TestCase(100.0f, FormatError.None)]
        [TestCase(-100.0f, FormatError.None)]
        [TestCase(100.5f, FormatError.None)]
        [TestCase(0.001005f, FormatError.None)]
        [TestCase(0.0001f, FormatError.None)]
        [TestCase(0.00001f, FormatError.None)]
        [TestCase(0.000001f, FormatError.None)]
        [TestCase(-1E10f, FormatError.None)]
        [TestCase(-1E-10f, FormatError.None)]
        public void NativeString4096AppendFloat(float input, FormatError expectedResult)
        {
            var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
            var expectedOutput = "foo" + input.ToString();
            NativeString4096 aa = "foo";
            var result = aa.Append(input, localizedDecimalSeparator);
            Assert.AreEqual(expectedResult, result);
            if (result == FormatError.None)
            {
                var actualOutput = aa.ToString();
                Assert.AreEqual(expectedOutput, actualOutput);
            }
        }

        [Test]
        public void NativeString4096FormatNegativeZero()
        {
            float input = -0.0f;
            var expectedOutput = input.ToString();
            NativeString4096 aa = new NativeString4096();
            var result = aa.Format(input);
            Assert.AreEqual(FormatError.None, result);
            var actualOutput = aa.ToString();
            Assert.AreEqual(expectedOutput, actualOutput);
        }

        [TestCase("en-US")]
        [TestCase("da-DK")]
        public void NativeString4096ParseFloatLocale(String locale)
        {
            var original = CultureInfo.CurrentCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = new CultureInfo(locale);
                var localizedDecimalSeparator = Convert.ToChar(Thread.CurrentThread.CurrentCulture.NumberFormat.NumberDecimalSeparator);
                float value = 1.5f;
                NativeString4096 native = new NativeString4096();
                native.Format(value, localizedDecimalSeparator);
                var nativeResult = native.ToString();
                var managedResult = value.ToString();
                Assert.AreEqual(managedResult, nativeResult);
            }
            finally
            {
                Thread.CurrentThread.CurrentCulture = original;
            }
        }

        [Test]
        public void NativeString4096ParseFloatNan()
        {
            NativeString4096 aa = new NativeString4096("NaN");
            int offset = 0;
            float output = 0;
            var result = aa.Parse(ref offset, ref output);
            Assert.AreEqual(ParseError.None, result);
            Assert.IsTrue(Single.IsNaN(output));
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString4096ToStringWorks(String a)
        {
            NativeString4096 aa = new NativeString4096(a);
            Assert.AreEqual(aa.ToString(), a);
        }

        [TestCase("monkey", "monkey")]
        [TestCase("yellow", "green")]
        [TestCase("violet", "紅色", TestName = "{m}(Violet-Chinese-Red")]
        [TestCase("绿色", "蓝色", TestName = "{m}(Chinese-Green-Blue")]
        [TestCase("靛蓝色", "紫罗兰色", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "村上春樹", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("三島 由紀夫", "吉本ばなな", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void NativeString4096EqualsWorks(String a, String b)
        {
            NativeString4096 aa = new NativeString4096(a);
            NativeString4096 bb = new NativeString4096(b);
            Assert.AreEqual(aa.Equals(bb), a.Equals(b));
        }

        [TestCase("monkey", "monkey")]
        [TestCase("red", "orange")]
        [TestCase("violet", "紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("橙色", "黄色", TestName = "{m}(Chinese-Orange-Yellow")]
        [TestCase("靛蓝色", "紫罗兰色", TestName = "{m}(Chinese-Indigo-Violet")]
        [TestCase("James Monroe", "John Quincy Adams")]
        [TestCase("Andrew Jackson", "村上春樹", TestName = "{m}(AndrewJackson-HarukiMurakami")]
        [TestCase("三島 由紀夫", "吉本ばなな", TestName = "{m}(MishimaYukio-YoshimotoBanana")]
        public void NativeString4096CompareToWorks(String a, String b)
        {
            NativeString4096 aa = new NativeString4096(a);
            NativeString4096 bb = new NativeString4096(b);
            var c0 = aa.CompareTo(bb);
            var c1 = a.CompareTo(b);
            Assert.AreEqual(c0, c1);
        }

        [Test]
        public void NativeString4096SizeOf()
        {
            Assert.AreEqual(UnsafeUtility.SizeOf<NativeString4096>(), 4096);
        }

        [TestCase("red", new byte[] {3, 0, 114, 101, 100}, TestName = "red")]
        [TestCase("紅色", new byte[] {6, 0, 231, 180, 133, 232, 137, 178}, TestName = "{m}(Chinese-Red)")]
        [TestCase("црвена", new byte[] {12, 0, 209, 134, 209, 128, 208, 178, 208, 181, 208, 189, 208, 176}, TestName = "{m}(Serbian-Red)")]
        [TestCase("George Washington", new byte[] {17, 0, 71, 101, 111, 114, 103, 101, 32, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110}, TestName = "George Washington")]
        [TestCase("村上春樹", new byte[] {12, 0, 230, 157, 145, 228, 184, 138, 230, 152, 165, 230, 168, 185}, TestName = "{m}(HarukiMurakami)")]
        [TestCase("🌕🌖🌗🌘🌑🌒🌓🌔", new byte[] {32, 0, 240, 159, 140, 149, 240, 159, 140, 150, 240, 159, 140, 151, 240, 159, 140, 152, 240, 159, 140, 145, 240, 159, 140, 146, 240, 159, 140, 147, 240, 159, 140, 148}, TestName = "{m}(MoonPhases)")]
        [TestCase("𝒞𝒯𝒮𝒟𝒳𝒩𝒫𝒢", new byte[] {32, 0, 240, 157, 146, 158, 240, 157, 146, 175, 240, 157, 146, 174, 240, 157, 146, 159, 240, 157, 146, 179, 240, 157, 146, 169, 240, 157, 146, 171, 240, 157, 146, 162}, TestName = "{m}(Cursive)")]
        [TestCase("로마는 하루아침에 이루어진 것이 아니다", new byte[] {55, 0, 235, 161, 156, 235, 167, 136, 235, 138, 148, 32, 237, 149, 152, 235, 163, 168, 236, 149, 132, 236, 185, 168, 236, 151, 144, 32, 236, 157, 180, 235, 163, 168, 236, 150, 180, 236, 167, 132, 32, 234, 178, 131, 236, 157, 180, 32, 236, 149, 132, 235, 139, 136, 235, 139, 164}, TestName = "{m}(Korean - Rome was not made overnight)")]
        [TestCase("Лако ти је плитку воду замутити и будалу наљутити", new byte[] {90, 0, 208, 155, 208, 176, 208, 186, 208, 190, 32, 209, 130, 208, 184, 32, 209, 152, 208, 181, 32, 208, 191, 208, 187, 208, 184, 209, 130, 208, 186, 209, 131, 32, 208, 178, 208, 190, 208, 180, 209, 131, 32, 208, 183, 208, 176, 208, 188, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184, 32, 208, 184, 32, 208, 177, 209, 131, 208, 180, 208, 176, 208, 187, 209, 131, 32, 208, 189, 208, 176, 209, 153, 209, 131, 209, 130, 208, 184, 209, 130, 208, 184}, TestName = "{m}(Serbian-Proverb)")]
        [TestCase("Үнэн үг хэлсэн хүнд ноёд өстэй, үхэр унасан хүнд ноход өстэй.", new byte[] {110, 0, 210, 174, 208, 189, 209, 141, 208, 189, 32, 210, 175, 208, 179, 32, 209, 133, 209, 141, 208, 187, 209, 129, 209, 141, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 145, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 44, 32, 210, 175, 209, 133, 209, 141, 209, 128, 32, 209, 131, 208, 189, 208, 176, 209, 129, 208, 176, 208, 189, 32, 209, 133, 210, 175, 208, 189, 208, 180, 32, 208, 189, 208, 190, 209, 133, 208, 190, 208, 180, 32, 211, 169, 209, 129, 209, 130, 209, 141, 208, 185, 46}, TestName = "{m}(Mongolian-Proverb1)")]
        [TestCase("न अभिशेको न संस्कारः सिम्हस्य कृयते वनेविक्रमार्जितसत्वस्य स्वयमेव मृगेन्द्रता", new byte[] {218, 0, 224, 164, 168, 32, 224, 164, 133, 224, 164, 173, 224, 164, 191, 224, 164, 182, 224, 165, 135, 224, 164, 149, 224, 165, 139, 32, 224, 164, 168, 32, 224, 164, 184, 224, 164, 130, 224, 164, 184, 224, 165, 141, 224, 164, 149, 224, 164, 190, 224, 164, 176, 224, 164, 131, 32, 224, 164, 184, 224, 164, 191, 224, 164, 174, 224, 165, 141, 224, 164, 185, 224, 164, 184, 224, 165, 141, 224, 164, 175, 32, 224, 164, 149, 224, 165, 131, 224, 164, 175, 224, 164, 164, 224, 165, 135, 32, 224, 164, 181, 224, 164, 168, 224, 165, 135, 224, 164, 181, 224, 164, 191, 224, 164, 149, 224, 165, 141, 224, 164, 176, 224, 164, 174, 224, 164, 190, 224, 164, 176, 224, 165, 141, 224, 164, 156, 224, 164, 191, 224, 164, 164, 224, 164, 184, 224, 164, 164, 224, 165, 141, 224, 164, 181, 224, 164, 184, 224, 165, 141, 224, 164, 175, 32, 224, 164, 184, 224, 165, 141, 224, 164, 181, 224, 164, 175, 224, 164, 174, 224, 165, 135, 224, 164, 181, 32, 224, 164, 174, 224, 165, 131, 224, 164, 151, 224, 165, 135, 224, 164, 168, 224, 165, 141, 224, 164, 166, 224, 165, 141, 224, 164, 176, 224, 164, 164, 224, 164, 190}, TestName = "{m}(Hindi-Proverb3)")]
        unsafe public void NativeString4096Layout(String a, byte[] expected)
        {
            fixed(byte* expectedBytes = expected)
            {
                NativeString4096 actual = a;
                byte* actualBytes = (byte*)&actual;
                Assert.AreEqual(0, UnsafeUtility.MemCmp(expectedBytes, actualBytes, expected.Length));
            }
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString4096ToNativeString32Works(String a)
        {
            var b = new NativeString4096(a);
            var c = new NativeString32(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString4096ToNativeString64Works(String a)
        {
            var b = new NativeString4096(a);
            var c = new NativeString64(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString4096ToNativeString128Works(String a)
        {
            var b = new NativeString4096(a);
            var c = new NativeString128(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("George Washington")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        public void NativeString4096ToNativeString512Works(String a)
        {
            var b = new NativeString4096(a);
            var c = new NativeString512(ref b);
            String d = c.ToString();
            Assert.AreEqual(a, d);
        }

        [TestCase("red")]
        [TestCase("orange")]
        [TestCase("yellow")]
        [TestCase("green")]
        [TestCase("blue")]
        [TestCase("indigo")]
        [TestCase("violet")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("橙色", TestName = "{m}(Chinese-Orange)")]
        [TestCase("黄色", TestName = "{m}(Chinese-Yellow)")]
        [TestCase("绿色", TestName = "{m}(Chinese-Green)")]
        [TestCase("蓝色", TestName = "{m}(Chinese-Blue")]
        [TestCase("靛蓝色", TestName = "{m}(Chinese-Indigo")]
        [TestCase("紫罗兰色", TestName = "{m}(Chinese-Violet")]
        [TestCase("црвена", TestName = "{m}(Serbian-Red)")]
        [TestCase("наранџаста", TestName = "{m}(Serbian-Orange)")]
        [TestCase("жута", TestName = "{m}(Serbian-Yellow)")]
        [TestCase("зелена", TestName = "{m}(Serbian-Green)")]
        [TestCase("плава", TestName = "{m}(Serbian-Blue")]
        [TestCase("индиго", TestName = "{m}(Serbian-Indigo")]
        [TestCase("љубичаста", TestName = "{m}(Serbian-Violet")]
        [TestCase("George Washington")]
        [TestCase("John Adams")]
        [TestCase("Thomas Jefferson")]
        [TestCase("James Madison")]
        [TestCase("James Monroe")]
        [TestCase("John Quincy Adams")]
        [TestCase("Andrew Jackson")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        [TestCase("三島 由紀夫", TestName = "{m}(MishimaYukio)")]
        [TestCase("吉本ばなな", TestName = "{m}(YoshimotoBanana)")]
        [TestCase("大江健三郎", TestName = "{m}(OeKenzaburo)")]
        [TestCase("川端 康成", TestName = "{m}(KawabataYasunari)")]
        [TestCase("桐野夏生", TestName = "{m}(TongyeXiasheng)")]
        [TestCase("芥川龍之介", TestName = "{m}(RyunosukeAkutagawa)")]
        [TestCase("로마는 하루아침에 이루어진 것이 아니다", TestName = "{m}(Korean - Rome was not made overnight)")]
        [TestCase("낮말은 새가 듣고 밤말은 쥐가 듣는다", TestName = "{m}(Korean-Proverb2)")]
        [TestCase("말을 냇가에 끌고 갈 수는 있어도 억지로 물을 먹일 수는 없다", TestName = "{m}(Korean-Proverb3)")]
        [TestCase("호랑이에게 물려가도 정신만 차리면 산다", TestName = "{m}(Korean-Proverb4)")]
        [TestCase("Љубазни фењерџија чађавог лица хоће да ми покаже штос.", TestName = "{m}(Serbian-Pangram)")]
        [TestCase("Лако ти је плитку воду замутити и будалу наљутити", TestName = "{m}(Serbian-Proverb)")]
        [TestCase("Үнэн үг хэлсэн хүнд ноёд өстэй, үхэр унасан хүнд ноход өстэй.", TestName = "{m}(Mongolian-Proverb1)")]
        [TestCase("Өнгөрсөн борооны хойноос эсгий нөмрөх.", TestName = "{m}(Mongolian-Proverb2)")]
        [TestCase("Барын сүүл байснаас батганы толгой байсан нь дээр.", TestName = "{m}(Mongolian-Proverb3)")]
        [TestCase("Гараар ганц хүнийг дийлэх. Tолгойгоор мянган хүнийг дийлэх.", TestName = "{m}(Mongolian-Proverb4)")]
        [TestCase("Աղւէսը բերանը խաղողին չի հասնում, ասում է՝ խակ է", TestName = "{m}(Armenian-Proverb1)")]
        [TestCase("Ամեն փայտ շերեփ չի դառնա, ամեն սար՝ Մասիս", TestName = "{m}(Armenian-Proverb2)")]
        [TestCase("Արևին ասում է դուրս մի արի՝ ես դուրս եմ եկել", TestName = "{m}(Armenian-Proverb3)")]
        [TestCase("Գայլի գլխին Աւետարան են կարդում, ասում է՝ շուտ արէ՛ք, գալլէս գնաց", TestName = "{m}(Armenian-Proverb4)")]
        [TestCase("पृथिव्यां त्रीणी रत्नानि जलमन्नं सुभाषितम्।", TestName = "{m}(Hindi-Proverb1)")]
        [TestCase("जननी जन्मभुमिस्छ स्वर्गादपि गरीयसि", TestName = "{m}(Hindi-Proverb2)")]
        [TestCase("न अभिशेको न संस्कारः सिम्हस्य कृयते वनेविक्रमार्जितसत्वस्य स्वयमेव मृगेन्द्रता", TestName = "{m}(Hindi-Proverb3)")]
        public void WordsWorks(String value)
        {
            Words s = new Words();
            s.SetString(value);
            Assert.AreEqual(s.ToString(), value);
        }

        [TestCase("red")]
        [TestCase("orange")]
        [TestCase("yellow")]
        [TestCase("green")]
        [TestCase("blue")]
        [TestCase("indigo")]
        [TestCase("violet")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("橙色", TestName = "{m}(Chinese-Orange)")]
        [TestCase("黄色", TestName = "{m}(Chinese-Yellow)")]
        [TestCase("绿色", TestName = "{m}(Chinese-Green)")]
        [TestCase("蓝色", TestName = "{m}(Chinese-Blue")]
        [TestCase("靛蓝色", TestName = "{m}(Chinese-Indigo")]
        [TestCase("紫罗兰色", TestName = "{m}(Chinese-Violet")]
        [TestCase("црвена", TestName = "{m}(Serbian-Red)")]
        [TestCase("наранџаста", TestName = "{m}(Serbian-Orange)")]
        [TestCase("жута", TestName = "{m}(Serbian-Yellow)")]
        [TestCase("зелена", TestName = "{m}(Serbian-Green)")]
        [TestCase("плава", TestName = "{m}(Serbian-Blue")]
        [TestCase("индиго", TestName = "{m}(Serbian-Indigo")]
        [TestCase("љубичаста", TestName = "{m}(Serbian-Violet")]
        [TestCase("George Washington")]
        [TestCase("John Adams")]
        [TestCase("Thomas Jefferson")]
        [TestCase("James Madison")]
        [TestCase("James Monroe")]
        [TestCase("John Quincy Adams")]
        [TestCase("Andrew Jackson")]
        [TestCase("村上春樹", TestName = "{m}(HarukiMurakami)")]
        [TestCase("三島 由紀夫", TestName = "{m}(MishimaYukio)")]
        [TestCase("吉本ばなな", TestName = "{m}(YoshimotoBanana)")]
        [TestCase("大江健三郎", TestName = "{m}(OeKenzaburo)")]
        [TestCase("川端 康成", TestName = "{m}(KawabataYasunari)")]
        [TestCase("桐野夏生", TestName = "{m}(TongyeXiasheng)")]
        [TestCase("芥川龍之介", TestName = "{m}(RyunosukeAkutagawa)")]
        [TestCase("로마는 하루아침에 이루어진 것이 아니다", TestName = "{m}(Korean-Proverb1)")]
        [TestCase("낮말은 새가 듣고 밤말은 쥐가 듣는다", TestName = "{m}(Korean-Proverb2)")]
        [TestCase("말을 냇가에 끌고 갈 수는 있어도 억지로 물을 먹일 수는 없다", TestName = "{m}(Korean-Proverb3)")]
        [TestCase("호랑이에게 물려가도 정신만 차리면 산다", TestName = "{m}(Korean-Proverb4)")]
        [TestCase("Љубазни фењерџија чађавог лица хоће да ми покаже штос.", TestName = "{m}(Serbian-Pangram)")]
        [TestCase("Лако ти је плитку воду замутити и будалу наљутити", TestName = "{m}(Serbian-Proverb)")]
        [TestCase("Үнэн үг хэлсэн хүнд ноёд өстэй, үхэр унасан хүнд ноход өстэй.", TestName = "{m}(Mongolian-Proverb1)")]
        [TestCase("Өнгөрсөн борооны хойноос эсгий нөмрөх.", TestName = "{m}(Mongolian-Proverb2)")]
        [TestCase("Барын сүүл байснаас батганы толгой байсан нь дээр.", TestName = "{m}(Mongolian-Proverb3)")]
        [TestCase("Гараар ганц хүнийг дийлэх. Tолгойгоор мянган хүнийг дийлэх.", TestName = "{m}(Mongolian-Proverb4)")]
        [TestCase("Աղւէսը բերանը խաղողին չի հասնում, ասում է՝ խակ է", TestName = "{m}(Armenian-Proverb1)")]
        [TestCase("Ամեն փայտ շերեփ չի դառնա, ամեն սար՝ Մասիս", TestName = "{m}(Armenian-Proverb2)")]
        [TestCase("Արևին ասում է դուրս մի արի՝ ես դուրս եմ եկել", TestName = "{m}(Armenian-Proverb3)")]
        [TestCase("Գայլի գլխին Աւետարան են կարդում, ասում է՝ շուտ արէ՛ք, գալլէս գնաց", TestName = "{m}(Armenian-Proverb4)")]
        [TestCase("पृथिव्यां त्रीणी रत्नानि जलमन्नं सुभाषितम्।", TestName = "{m}(Hindi-Proverb1)")]
        [TestCase("जननी जन्मभुमिस्छ स्वर्गादपि गरीयसि", TestName = "{m}(Hindi-Proverb2)")]
        [TestCase("न अभिशेको न संस्कारः सिम्हस्य कृयते वनेविक्रमार्जितसत्वस्य स्वयमेव मृगेन्द्रता", TestName = "{m}(Hindi-Proverb3)")]
        public void AddWorks(String value)
        {
            Words w = new Words();
            Assert.IsFalse(WordStorage.Instance.Contains(value));
            Assert.IsTrue(WordStorage.Instance.Entries == 1);
            w.SetString(value);
            Assert.IsTrue(WordStorage.Instance.Contains(value));
            Assert.IsTrue(WordStorage.Instance.Entries == 2);
        }

        [TestCase("red")]
        [TestCase("orange")]
        [TestCase("yellow")]
        [TestCase("green")]
        [TestCase("blue")]
        [TestCase("indigo")]
        [TestCase("violet")]
        [TestCase("紅色", TestName = "{m}(Chinese-Red)")]
        [TestCase("橙色", TestName = "{m}(Chinese-Orange)")]
        [TestCase("黄色", TestName = "{m}(Chinese-Yellow)")]
        [TestCase("绿色", TestName = "{m}(Chinese-Green)")]
        [TestCase("蓝色", TestName = "{m}(Chinese-Blue")]
        [TestCase("靛蓝色", TestName = "{m}(Chinese-Indigo")]
        [TestCase("紫罗兰色", TestName = "{m}(Chinese-Violet")]
        [TestCase("로마는 하루아침에 이루어진 것이 아니다", TestName = "{m}(Korean - Rome was not made overnight)")]
        [TestCase("낮말은 새가 듣고 밤말은 쥐가 듣는다", TestName = "{m}(Korean-Proverb2)")]
        [TestCase("말을 냇가에 끌고 갈 수는 있어도 억지로 물을 먹일 수는 없다", TestName = "{m}(Korean-Proverb3)")]
        [TestCase("호랑이에게 물려가도 정신만 차리면 산다", TestName = "{m}(Korean-Proverb4)")]
        public void NumberedWordsWorks(String value)
        {
            NumberedWords w = new NumberedWords();
            Assert.IsTrue(WordStorage.Instance.Entries == 1);
            for (var i = 0; i < 100; ++i)
            {
                w.SetString(value + i);
                Assert.IsTrue(WordStorage.Instance.Entries == 2);
            }
        }
    }
}
#endif
